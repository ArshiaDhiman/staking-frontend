{"ast":null,"code":"import { Contract } from \"@ethersproject/contracts\";\nimport { InfuraProvider } from \"@ethersproject/providers\";\nconst library = new InfuraProvider(\"rinkeby\");\nexport function shortenHex(hex, length = 4) {\n  return `${hex.substring(0, length + 2)}…${hex.substring(hex.length - length)}`;\n}\nexport function getContract(address, ABI) {\n  return new Contract(address, ABI, library);\n}\nexport function convertHMS(value) {\n  const sec = parseInt(value, 10); // convert value to number if it's string\n\n  let hours = Math.floor(sec / 3600); // get hours\n\n  let minutes = Math.floor((sec - hours * 3600) / 60); // get minutes\n\n  let seconds = sec - hours * 3600 - minutes * 60; //  get seconds\n  // add 0 if value < 10; Example: 2 => 02\n\n  if (hours < 10) {\n    hours = \"0\" + hours;\n  }\n\n  if (minutes < 10) {\n    minutes = \"0\" + minutes;\n  }\n\n  if (seconds < 10) {\n    seconds = \"0\" + seconds;\n  }\n\n  return hours + \":\" + minutes + \":\" + seconds; // Return is HH : MM : SS\n}","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/src/utils.ts"],"names":["Contract","InfuraProvider","library","shortenHex","hex","length","substring","getContract","address","ABI","convertHMS","value","sec","parseInt","hours","Math","floor","minutes","seconds"],"mappings":"AAAA,SAASA,QAAT,QAA4C,0BAA5C;AACA,SAASC,cAAT,QAA+B,0BAA/B;AAEA,MAAMC,OAAO,GAAG,IAAID,cAAJ,CAAmB,SAAnB,CAAhB;AAEA,OAAO,SAASE,UAAT,CAAoBC,GAApB,EAAiCC,MAAM,GAAG,CAA1C,EAAqD;AACxD,SAAQ,GAAED,GAAG,CAACE,SAAJ,CAAc,CAAd,EAAiBD,MAAM,GAAG,CAA1B,CAA6B,IAAGD,GAAG,CAACE,SAAJ,CACtCF,GAAG,CAACC,MAAJ,GAAaA,MADyB,CAExC,EAFF;AAGH;AAED,OAAO,SAASE,WAAT,CAAqBC,OAArB,EAAsCC,GAAtC,EAAwE;AAC3E,SAAO,IAAIT,QAAJ,CAAaQ,OAAb,EAAsBC,GAAtB,EAA2BP,OAA3B,CAAP;AACH;AAED,OAAO,SAASQ,UAAT,CAAoBC,KAApB,EAA2B;AAC9B,QAAMC,GAAG,GAAGC,QAAQ,CAACF,KAAD,EAAQ,EAAR,CAApB,CAD8B,CACG;;AACjC,MAAIG,KAAsB,GAAGC,IAAI,CAACC,KAAL,CAAWJ,GAAG,GAAG,IAAjB,CAA7B,CAF8B,CAEuB;;AACrD,MAAIK,OAAwB,GAAGF,IAAI,CAACC,KAAL,CAAW,CAACJ,GAAG,GAAGE,KAAK,GAAG,IAAf,IAAuB,EAAlC,CAA/B,CAH8B,CAGwC;;AACtE,MAAII,OAAwB,GAAGN,GAAG,GAAGE,KAAK,GAAG,IAAd,GAAqBG,OAAO,GAAG,EAA9D,CAJ8B,CAIoC;AAClE;;AACA,MAAIH,KAAK,GAAG,EAAZ,EAAgB;AACZA,IAAAA,KAAK,GAAG,MAAMA,KAAd;AACH;;AACD,MAAIG,OAAO,GAAG,EAAd,EAAkB;AACdA,IAAAA,OAAO,GAAG,MAAMA,OAAhB;AACH;;AACD,MAAIC,OAAO,GAAG,EAAd,EAAkB;AACdA,IAAAA,OAAO,GAAG,MAAMA,OAAhB;AACH;;AACD,SAAOJ,KAAK,GAAG,GAAR,GAAcG,OAAd,GAAwB,GAAxB,GAA8BC,OAArC,CAf8B,CAegB;AACjD","sourcesContent":["import { Contract, ContractInterface } from \"@ethersproject/contracts\";\nimport { InfuraProvider } from \"@ethersproject/providers\";\n\nconst library = new InfuraProvider(\"rinkeby\");\n\nexport function shortenHex(hex: string, length = 4): string {\n    return `${hex.substring(0, length + 2)}…${hex.substring(\n        hex.length - length,\n    )}`;\n}\n\nexport function getContract(address: string, ABI: ContractInterface): Contract {\n    return new Contract(address, ABI, library);\n}\n\nexport function convertHMS(value) {\n    const sec = parseInt(value, 10); // convert value to number if it's string\n    let hours: string | number = Math.floor(sec / 3600); // get hours\n    let minutes: string | number = Math.floor((sec - hours * 3600) / 60); // get minutes\n    let seconds: string | number = sec - hours * 3600 - minutes * 60; //  get seconds\n    // add 0 if value < 10; Example: 2 => 02\n    if (hours < 10) {\n        hours = \"0\" + hours;\n    }\n    if (minutes < 10) {\n        minutes = \"0\" + minutes;\n    }\n    if (seconds < 10) {\n        seconds = \"0\" + seconds;\n    }\n    return hours + \":\" + minutes + \":\" + seconds; // Return is HH : MM : SS\n}\n"]},"metadata":{},"sourceType":"module"}