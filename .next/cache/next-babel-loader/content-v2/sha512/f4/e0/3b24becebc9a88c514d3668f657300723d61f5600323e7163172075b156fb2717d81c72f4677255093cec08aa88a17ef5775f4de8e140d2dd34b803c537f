{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Arshia Dhiman\\\\Solidity-Staking-Project\\\\staking-frontend\\\\src\\\\components\\\\right-stake-menu\\\\index.tsx\";\nimport React, { useState } from \"react\";\nimport { Button } from \"@components\";\nimport { useContract } from \"src/hooks/useContract\";\nimport { STAKING_ADDRESS } from \"src/constants\";\nimport StakingABI from \"src/abi/Staking.json\";\nimport { parseBalance } from \"src/utils\";\nimport { useRouter } from \"next/dist/client/router\";\nimport { toast } from \"react-toastify\";\nexport const RightStakeMenu = ({\n  id,\n  stakedAmount,\n  reward\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n  const router = useRouter();\n\n  const redeemTokens = async () => {\n    setLoading(true);\n\n    try {\n      if (staking) {\n        toast.info(\"Awaiting successful transaction\");\n        const tx = await (staking === null || staking === void 0 ? void 0 : staking.unstake(id));\n        await tx.wait();\n      }\n\n      router.reload();\n    } catch (err) {\n      console.log(err);\n    }\n\n    setLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex-1 space-y-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"Amount Staked :\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [parseBalance(stakedAmount), \" ARSH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"Rewards Earned : \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [parseBalance(reward), \" ARSH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: redeemTokens,\n      className: \"w-full\",\n      loading: loading,\n      children: \"Redeem\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/src/components/right-stake-menu/index.tsx"],"names":["React","useState","Button","useContract","STAKING_ADDRESS","StakingABI","parseBalance","useRouter","toast","RightStakeMenu","id","stakedAmount","reward","loading","setLoading","staking","router","redeemTokens","info","tx","unstake","wait","reload","err","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAO,MAAMC,cAIX,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,YAAN;AAAoBC,EAAAA;AAApB,CAAD,KAAkC;AACnC,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBb,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMc,OAAO,GAAGZ,WAAW,CAACC,eAAD,EAAkBC,UAAlB,EAA8B,IAA9B,CAA3B;AACA,QAAMW,MAAM,GAAGT,SAAS,EAAxB;;AAEA,QAAMU,YAAY,GAAG,YAAY;AAC7BH,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACA,UAAIC,OAAJ,EAAa;AACTP,QAAAA,KAAK,CAACU,IAAN,CAAW,iCAAX;AACA,cAAMC,EAAE,GAAG,OAAMJ,OAAN,aAAMA,OAAN,uBAAMA,OAAO,CAAEK,OAAT,CAAiBV,EAAjB,CAAN,CAAX;AACA,cAAMS,EAAE,CAACE,IAAH,EAAN;AACH;;AACDL,MAAAA,MAAM,CAACM,MAAP;AACH,KAPD,CAOE,OAAOC,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;;AACDT,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAbD;;AAcA,sBACI;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA,4BACI;AAAG,MAAA,SAAS,EAAC,yBAAb;AAAA,oCACoB,GADpB,eAEI;AAAA,mBAASR,YAAY,CAACK,YAAD,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAMI;AAAG,MAAA,SAAS,EAAC,yBAAb;AAAA,mDACqB;AAAA,mBAASL,YAAY,CAACM,MAAD,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA,cADrB;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,eAUI,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEK,YAAjB;AAA+B,MAAA,SAAS,EAAC,QAAzC;AAAkD,MAAA,OAAO,EAAEJ,OAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CAvCM","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from \"@components\";\nimport { useContract } from \"src/hooks/useContract\";\nimport { STAKING_ADDRESS } from \"src/constants\";\nimport StakingABI from \"src/abi/Staking.json\";\nimport { parseBalance } from \"src/utils\";\nimport { useRouter } from \"next/dist/client/router\";\nimport { toast } from \"react-toastify\";\n\nexport const RightStakeMenu: React.FC<{\n    id: number;\n    stakedAmount: string;\n    reward: string;\n}> = ({ id, stakedAmount, reward }) => {\n    const [loading, setLoading] = useState(false);\n    const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n    const router = useRouter();\n\n    const redeemTokens = async () => {\n        setLoading(true);\n        try {\n            if (staking) {\n                toast.info(\"Awaiting successful transaction\");\n                const tx = await staking?.unstake(id);\n                await tx.wait();\n            }\n            router.reload();\n        } catch (err) {\n            console.log(err);\n        }\n        setLoading(false);\n    };\n    return (\n        <div className=\"flex-1 space-y-2\">\n            <p className=\"text-base text-gray-300\">\n                Amount Staked :{\" \"}\n                <strong>{parseBalance(stakedAmount)} ARSH</strong>\n            </p>\n\n            <p className=\"text-base text-gray-300\">\n                Rewards Earned : <strong>{parseBalance(reward)} ARSH</strong>\n            </p>\n\n            <Button onClick={redeemTokens} className=\"w-full\" loading={loading}>\n                Redeem\n            </Button>\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}