{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Arshia Dhiman\\\\Solidity-Staking-Project\\\\staking-frontend\\\\src\\\\components\\\\stake-menu\\\\index.tsx\";\nimport React, { useState } from \"react\";\nimport { Button, Input } from \"@components\";\nimport { useContract } from \"src/hooks/useContract\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { STAKING_ADDRESS, TOKEN_ADDRESS } from \"src/constants\";\nimport StakingABI from \"src/abi/Staking.json\";\nimport TokenABI from \"src/abi/Token.json\";\nimport { parseBalance } from \"src/utils\";\nexport const StakeMenu = ({\n  balance,\n  id\n}) => {\n  const {\n    0: amount,\n    1: setAmount\n  } = useState(\"0\");\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: allowance,\n    1: setAllowance\n  } = useState(false);\n  const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n  const token = useContract(TOKEN_ADDRESS, TokenABI, true);\n  const {\n    active,\n    account\n  } = useWeb3React();\n  console.log(token === null || token === void 0 ? void 0 : token.address); // const stakeTokens = async () => {\n  //     setLoading(true);\n  //     try {\n  //         if (allowance) {\n  //             token.approve(account, LARGEST_NUM);\n  //         } else {\n  //             try {\n  //                 if (staking) {\n  //                     const tx = await staking.stake(numberToWei(amount), id);\n  //                     await tx.wait();\n  //                 }\n  //             } catch (err) {\n  //                 console.log(err);\n  //             }\n  //         }\n  //     } catch (err) {\n  //         console.log(err);\n  //     }\n  //     setLoading(false);\n  // };\n  // useEffect(() => {\n  //     if (allowance == 0) {\n  //         token.approve(STAKING_ADDRESS, LARGEST_NUM);\n  //     }\n  // }, [token]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center border\",\n      children: [\"Available : \", parseBalance(active ? balance : 0), \" ARSH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex p-6 space-x-6 border rounded-b-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 border\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-base text-gray-300\",\n            children: [\"Amount After Stake : \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 50\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-base text-gray-300\",\n            children: [\"Rewards Earned : \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 46\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"\",\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            label: \"Stake Amount\",\n            id: \"amount\",\n            placeholder: \"Amount\",\n            value: amount,\n            type: \"number\",\n            onChange: e => setAmount(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: \"w-full\",\n            loading: loading,\n            children: allowance ? \"Stake\" : \"Enable\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"border flex-1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n/*\nallowance varable same as balance \nnew useeffect \nif allowance = 0 they havnt approved \ndisplay enable  and stake depending on allowance \nif they want to enable make a transaction just like stake owner can approve spender and amount  into contract\napproving the vesting contract address and amount \napprove the biggest amount \nmax approval amount as constant \n\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\" largest number\nwhen not equal to zero you know they have approved */\n\n/* have an alllowance varable to set the state of allowance\nuse useEffect */","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/src/components/stake-menu/index.tsx"],"names":["React","useState","Button","Input","useContract","useWeb3React","STAKING_ADDRESS","TOKEN_ADDRESS","StakingABI","TokenABI","parseBalance","StakeMenu","balance","id","amount","setAmount","loading","setLoading","allowance","setAllowance","staking","token","active","account","console","log","address","e","target","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,aAA9B;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,eAAT,EAA0BC,aAA1B,QAA4D,eAA5D;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAAsBC,YAAtB,QAA0C,WAA1C;AAEA,OAAO,MAAMC,SAAoD,GAAG,CAAC;AACjEC,EAAAA,OADiE;AAEjEC,EAAAA;AAFiE,CAAD,KAG9D;AACF,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBd,QAAQ,CAAC,GAAD,CAApC;AACA,QAAM;AAAA,OAACe,OAAD;AAAA,OAAUC;AAAV,MAAwBhB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAA,OAACiB,SAAD;AAAA,OAAYC;AAAZ,MAA4BlB,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMmB,OAAO,GAAGhB,WAAW,CAACE,eAAD,EAAkBE,UAAlB,EAA8B,IAA9B,CAA3B;AACA,QAAMa,KAAK,GAAGjB,WAAW,CAACG,aAAD,EAAgBE,QAAhB,EAA0B,IAA1B,CAAzB;AACA,QAAM;AAAEa,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAsBlB,YAAY,EAAxC;AACAmB,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ,aAAYA,KAAZ,uBAAYA,KAAK,CAAEK,OAAnB,EARE,CAUF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA,iCACiBhB,YAAY,CAACY,MAAM,GAAGV,OAAH,GAAa,CAApB,CAD7B;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAK,MAAA,SAAS,EAAC,wCAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,gCACI;AAAA,kCACI;AAAG,YAAA,SAAS,EAAC,yBAAb;AAAA,6DACyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADzB;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAKI;AAAG,YAAA,SAAS,EAAC,yBAAb;AAAA,yDACqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADrB;AAAA;AAAA;AAAA;AAAA;AAAA,kBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAUI;AAAK,UAAA,SAAS,EAAC,EAAf;AAAA,kCACI,QAAC,KAAD;AACI,YAAA,KAAK,EAAC,cADV;AAEI,YAAA,EAAE,EAAC,QAFP;AAGI,YAAA,WAAW,EAAC,QAHhB;AAII,YAAA,KAAK,EAAEE,MAJX;AAKI,YAAA,IAAI,EAAC,QALT;AAMI,YAAA,QAAQ,EAAGa,CAAD,IAAOZ,SAAS,CAACY,CAAC,CAACC,MAAF,CAASC,KAAV;AAN9B;AAAA;AAAA;AAAA;AAAA,kBADJ,eASI,QAAC,MAAD;AAAQ,YAAA,SAAS,EAAC,QAAlB;AAA2B,YAAA,OAAO,EAAEb,OAApC;AAAA,sBACKE,SAAS,GAAG,OAAH,GAAa;AAD3B;AAAA;AAAA;AAAA;AAAA,kBATJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAyBI;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cAzBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmCH,CA3EM;AA6EP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Button, Input } from \"@components\";\nimport { useContract } from \"src/hooks/useContract\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { STAKING_ADDRESS, TOKEN_ADDRESS, LARGEST_NUM } from \"src/constants\";\nimport StakingABI from \"src/abi/Staking.json\";\nimport TokenABI from \"src/abi/Token.json\";\nimport { numberToWei, parseBalance } from \"src/utils\";\n\nexport const StakeMenu: React.FC<{ balance: string; id: number }> = ({\n    balance,\n    id,\n}) => {\n    const [amount, setAmount] = useState(\"0\");\n    const [loading, setLoading] = useState(false);\n    const [allowance, setAllowance] = useState(false);\n\n    const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n    const token = useContract(TOKEN_ADDRESS, TokenABI, true);\n    const { active, account } = useWeb3React();\n    console.log(token?.address);\n\n    // const stakeTokens = async () => {\n    //     setLoading(true);\n    //     try {\n    //         if (allowance) {\n    //             token.approve(account, LARGEST_NUM);\n    //         } else {\n    //             try {\n    //                 if (staking) {\n    //                     const tx = await staking.stake(numberToWei(amount), id);\n    //                     await tx.wait();\n    //                 }\n    //             } catch (err) {\n    //                 console.log(err);\n    //             }\n    //         }\n    //     } catch (err) {\n    //         console.log(err);\n    //     }\n    //     setLoading(false);\n    // };\n\n    // useEffect(() => {\n    //     if (allowance == 0) {\n    //         token.approve(STAKING_ADDRESS, LARGEST_NUM);\n    //     }\n    // }, [token]);\n\n    return (\n        <div>\n            <div className=\"text-center border\">\n                Available : {parseBalance(active ? balance : 0)} ARSH\n            </div>\n\n            <div className=\"flex p-6 space-x-6 border rounded-b-lg\">\n                <div className=\"flex-1 border\">\n                    <div>\n                        <p className=\"text-base text-gray-300\">\n                            Amount After Stake : <strong>amount</strong>\n                        </p>\n\n                        <p className=\"text-base text-gray-300\">\n                            Rewards Earned : <strong>amount</strong>\n                        </p>\n                    </div>\n                    <div className=\"\">\n                        <Input\n                            label=\"Stake Amount\"\n                            id=\"amount\"\n                            placeholder=\"Amount\"\n                            value={amount}\n                            type=\"number\"\n                            onChange={(e) => setAmount(e.target.value)}\n                        />\n                        <Button className=\"w-full\" loading={loading}>\n                            {allowance ? \"Stake\" : \"Enable\"}\n                        </Button>\n                    </div>\n                </div>\n                <div className=\"border flex-1\"></div>\n            </div>\n        </div>\n    );\n};\n\n/*\nallowance varable same as balance \nnew useeffect \nif allowance = 0 they havnt approved \ndisplay enable  and stake depending on allowance \nif they want to enable make a transaction just like stake owner can approve spender and amount  into contract\napproving the vesting contract address and amount \napprove the biggest amount \nmax approval amount as constant \n\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\" largest number\nwhen not equal to zero you know they have approved */\n/* have an alllowance varable to set the state of allowance\nuse useEffect */\n"]},"metadata":{},"sourceType":"module"}