{"ast":null,"code":"import { Contract } from \"@ethersproject/contracts\";\nimport { InfuraProvider } from \"@ethersproject/providers\";\nimport { commify, formatUnits, parseEther } from \"@ethersproject/units\";\nvar rewardInterval = 31536000;\nvar library = new InfuraProvider(\"rinkeby\");\nexport function shortenHex(hex) {\n  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  return \"\".concat(hex.substring(0, length + 2), \"\\u2026\").concat(hex.substring(hex.length - length));\n}\nexport function getContract(address, ABI) {\n  return new Contract(address, ABI, library);\n}\nexport function secondsToWeeks(_seconds) {\n  var seconds = parseInt(_seconds);\n  var months = seconds / 604800;\n  return months;\n}\nexport var parseBalance = function parseBalance(balance) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 18;\n  var decimalsToDisplay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n  return commify(Number(formatUnits(balance, decimals)).toFixed(decimalsToDisplay));\n};\nexport var numberToWei = function numberToWei(number) {\n  var num = number.split(\"\").filter(function (c) {\n    return c !== \",\";\n  }).join(\"\");\n  return parseEther(num).toString();\n};\nexport var calculateReward = function calculateReward(_amount, rewardRate, lockperiod) {\n  var reward = _amount.mul(rewardRate).mul(lockperiod).div(rewardInterval);\n\n  return reward;\n};","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/src/utils.ts"],"names":["Contract","InfuraProvider","commify","formatUnits","parseEther","rewardInterval","library","shortenHex","hex","length","substring","getContract","address","ABI","secondsToWeeks","_seconds","seconds","parseInt","months","parseBalance","balance","decimals","decimalsToDisplay","Number","toFixed","numberToWei","number","num","split","filter","c","join","toString","calculateReward","_amount","rewardRate","lockperiod","reward","mul","div"],"mappings":"AAAA,SAASA,QAAT,QAA4C,0BAA5C;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,UAA/B,QAAiD,sBAAjD;AAIA,IAAMC,cAAc,GAAG,QAAvB;AACA,IAAMC,OAAO,GAAG,IAAIL,cAAJ,CAAmB,SAAnB,CAAhB;AAEA,OAAO,SAASM,UAAT,CAAoBC,GAApB,EAAqD;AAAA,MAApBC,MAAoB,uEAAX,CAAW;AACxD,mBAAUD,GAAG,CAACE,SAAJ,CAAc,CAAd,EAAiBD,MAAM,GAAG,CAA1B,CAAV,mBAA0CD,GAAG,CAACE,SAAJ,CACtCF,GAAG,CAACC,MAAJ,GAAaA,MADyB,CAA1C;AAGH;AAED,OAAO,SAASE,WAAT,CAAqBC,OAArB,EAAsCC,GAAtC,EAAwE;AAC3E,SAAO,IAAIb,QAAJ,CAAaY,OAAb,EAAsBC,GAAtB,EAA2BP,OAA3B,CAAP;AACH;AAED,OAAO,SAASQ,cAAT,CAAwBC,QAAxB,EAAkD;AACrD,MAAMC,OAAO,GAAGC,QAAQ,CAACF,QAAD,CAAxB;AACA,MAAMG,MAAM,GAAGF,OAAO,GAAG,MAAzB;AACA,SAAOE,MAAP;AACH;AAED,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CACxBC,OADwB;AAAA,MAExBC,QAFwB,uEAEb,EAFa;AAAA,MAGxBC,iBAHwB,uEAGJ,CAHI;AAAA,SAKxBpB,OAAO,CAACqB,MAAM,CAACpB,WAAW,CAACiB,OAAD,EAAUC,QAAV,CAAZ,CAAN,CAAuCG,OAAvC,CAA+CF,iBAA/C,CAAD,CALiB;AAAA,CAArB;AAOP,OAAO,IAAMG,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAA4B;AACnD,MAAMC,GAAG,GAAGD,MAAM,CACbE,KADO,CACD,EADC,EAEPC,MAFO,CAEA,UAACC,CAAD;AAAA,WAAOA,CAAC,KAAK,GAAb;AAAA,GAFA,EAGPC,IAHO,CAGF,EAHE,CAAZ;AAIA,SAAO3B,UAAU,CAACuB,GAAD,CAAV,CAAgBK,QAAhB,EAAP;AACH,CANM;AAQP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAC3BC,OAD2B,EAE3BC,UAF2B,EAG3BC,UAH2B,EAIf;AACZ,MAAMC,MAAM,GAAGH,OAAO,CAACI,GAAR,CAAYH,UAAZ,EAAwBG,GAAxB,CAA4BF,UAA5B,EAAwCG,GAAxC,CAA4ClC,cAA5C,CAAf;;AAEA,SAAOgC,MAAP;AACH,CARM","sourcesContent":["import { Contract, ContractInterface } from \"@ethersproject/contracts\";\nimport { InfuraProvider } from \"@ethersproject/providers\";\nimport { commify, formatUnits, parseEther } from \"@ethersproject/units\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { Pool } from \"./ts/interfaces\";\n\nconst rewardInterval = 31536000;\nconst library = new InfuraProvider(\"rinkeby\");\n\nexport function shortenHex(hex: string, length = 4): string {\n    return `${hex.substring(0, length + 2)}â€¦${hex.substring(\n        hex.length - length,\n    )}`;\n}\n\nexport function getContract(address: string, ABI: ContractInterface): Contract {\n    return new Contract(address, ABI, library);\n}\n\nexport function secondsToWeeks(_seconds: string): number {\n    const seconds = parseInt(_seconds);\n    const months = seconds / 604800;\n    return months;\n}\n\nexport const parseBalance = (\n    balance: BigNumberish,\n    decimals = 18,\n    decimalsToDisplay = 2,\n): string =>\n    commify(Number(formatUnits(balance, decimals)).toFixed(decimalsToDisplay));\n\nexport const numberToWei = (number: string): string => {\n    const num = number\n        .split(\"\")\n        .filter((c) => c !== \",\")\n        .join(\"\");\n    return parseEther(num).toString();\n};\n\nexport const calculateReward = (\n    _amount: BigNumber,\n    rewardRate: BigNumberish,\n    lockperiod: BigNumberish,\n): BigNumber => {\n    const reward = _amount.mul(rewardRate).mul(lockperiod).div(rewardInterval);\n\n    return reward;\n};\n"]},"metadata":{},"sourceType":"module"}