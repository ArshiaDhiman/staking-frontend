{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Arshia Dhiman\\\\Solidity-Staking-Project\\\\staking-frontend\\\\pages\\\\index.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { Main } from \"@components\";\nimport { STAKING_ADDRESS } from \"src/constants\";\nimport ABI from \"src/abi/Staking.json\";\nimport { getContract } from \"src/utils\";\nimport { useAppDispatch } from \"@src/hooks\";\nimport { setPools, updatePools } from \"@src/features/staking/stakingSlice\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nconst Home = ({\n  pools\n}) => {\n  const {\n    account\n  } = useWeb3React();\n  const {\n    0: tried,\n    1: setTried\n  } = useState(false);\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    if (pools.length > 0 && !tried) {\n      dispatch(setPools(pools));\n      setTried(true);\n    }\n\n    if (account) {\n      updatePools(account);\n    }\n  }, [tried, pools, account]);\n  return /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 12\n  }, this);\n};\n\nexport default Home;\nexport const getServerSideProps = async () => {\n  const staking = getContract(STAKING_ADDRESS, ABI); // eslint-disable-next-line\n\n  const _pools = await staking.getPools();\n\n  const pools = _pools.map(({\n    poolName,\n    rewardRate,\n    lockPeriod,\n    totalStaked\n  }, id) => ({\n    name: poolName,\n    rewardRate: rewardRate.toString(),\n    lockPeriod: lockPeriod.toString(),\n    totalStaked: totalStaked.toString(),\n    id: id,\n    user_stake: \"0\",\n    user_reward: \"0\"\n  }));\n\n  return {\n    props: {\n      pools\n    } // will be passed to the page component as\n\n  };\n};","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/pages/index.tsx"],"names":["React","useEffect","useState","Main","STAKING_ADDRESS","ABI","getContract","useAppDispatch","setPools","updatePools","useWeb3React","Home","pools","account","tried","setTried","dispatch","length","getServerSideProps","staking","_pools","getPools","map","poolName","rewardRate","lockPeriod","totalStaked","id","name","toString","user_stake","user_reward","props"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAGA,SAASC,IAAT,QAAqB,aAArB;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,oCAAtC;AACA,SAASC,YAAT,QAA6B,kBAA7B;;AAEA,MAAMC,IAAiC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AACrD,QAAM;AAAEC,IAAAA;AAAF,MAAcH,YAAY,EAAhC;AACA,QAAM;AAAA,OAACI,KAAD;AAAA,OAAQC;AAAR,MAAoBb,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAMc,QAAQ,GAAGT,cAAc,EAA/B;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIW,KAAK,CAACK,MAAN,GAAe,CAAf,IAAoB,CAACH,KAAzB,EAAgC;AAC5BE,MAAAA,QAAQ,CAACR,QAAQ,CAACI,KAAD,CAAT,CAAR;AACAG,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;;AACD,QAAIF,OAAJ,EAAa;AACTJ,MAAAA,WAAW,CAACI,OAAD,CAAX;AACH;AACJ,GARQ,EAQN,CAACC,KAAD,EAAQF,KAAR,EAAeC,OAAf,CARM,CAAT;AAUA,sBAAO,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAhBD;;AAkBA,eAAeF,IAAf;AAEA,OAAO,MAAMO,kBAAsC,GAAG,YAAY;AAC9D,QAAMC,OAAO,GAAGb,WAAW,CAACF,eAAD,EAAkBC,GAAlB,CAA3B,CAD8D,CAE9D;;AACA,QAAMe,MAAM,GAAI,MAAMD,OAAO,CAACE,QAAR,EAAtB;;AAEA,QAAMT,KAAK,GAAGQ,MAAM,CAACE,GAAP,CACV,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,UAAZ;AAAwBC,IAAAA,UAAxB;AAAoCC,IAAAA;AAApC,GAAD,EAAoDC,EAApD,MAA4D;AACxDC,IAAAA,IAAI,EAAEL,QADkD;AAExDC,IAAAA,UAAU,EAAEA,UAAU,CAACK,QAAX,EAF4C;AAGxDJ,IAAAA,UAAU,EAAEA,UAAU,CAACI,QAAX,EAH4C;AAIxDH,IAAAA,WAAW,EAAEA,WAAW,CAACG,QAAZ,EAJ2C;AAKxDF,IAAAA,EAAE,EAAEA,EALoD;AAMxDG,IAAAA,UAAU,EAAE,GAN4C;AAOxDC,IAAAA,WAAW,EAAE;AAP2C,GAA5D,CADU,CAAd;;AAYA,SAAO;AACHC,IAAAA,KAAK,EAAE;AAAEpB,MAAAA;AAAF,KADJ,CACe;;AADf,GAAP;AAGH,CApBM","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { GetServerSideProps } from \"next\";\nimport { Pool } from \"src/ts/interfaces\";\nimport { Main } from \"@components\";\nimport { STAKING_ADDRESS } from \"src/constants\";\nimport ABI from \"src/abi/Staking.json\";\nimport { getContract } from \"src/utils\";\nimport { useAppDispatch } from \"@src/hooks\";\nimport { setPools, updatePools } from \"@src/features/staking/stakingSlice\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nconst Home: React.FC<{ pools: Pool[] }> = ({ pools }) => {\n    const { account } = useWeb3React();\n    const [tried, setTried] = useState(false);\n    const dispatch = useAppDispatch();\n\n    useEffect(() => {\n        if (pools.length > 0 && !tried) {\n            dispatch(setPools(pools));\n            setTried(true);\n        }\n        if (account) {\n            updatePools(account);\n        }\n    }, [tried, pools, account]);\n\n    return <Main />;\n};\n\nexport default Home;\n\nexport const getServerSideProps: GetServerSideProps = async () => {\n    const staking = getContract(STAKING_ADDRESS, ABI);\n    // eslint-disable-next-line\n    const _pools = (await staking.getPools()) as any[];\n\n    const pools = _pools.map(\n        ({ poolName, rewardRate, lockPeriod, totalStaked }, id) => ({\n            name: poolName,\n            rewardRate: rewardRate.toString(),\n            lockPeriod: lockPeriod.toString(),\n            totalStaked: totalStaked.toString(),\n            id: id,\n            user_stake: \"0\",\n            user_reward: \"0\",\n        }),\n    );\n\n    return {\n        props: { pools }, // will be passed to the page component as\n    };\n};\n"]},"metadata":{},"sourceType":"module"}