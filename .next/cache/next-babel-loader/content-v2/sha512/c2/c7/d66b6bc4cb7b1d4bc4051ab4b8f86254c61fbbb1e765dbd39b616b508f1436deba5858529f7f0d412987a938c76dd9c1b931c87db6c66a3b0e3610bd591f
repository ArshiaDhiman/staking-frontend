{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Arshia Dhiman\\\\Solidity-Staking-Project\\\\staking-frontend\\\\src\\\\components\\\\right-stake-menu\\\\index.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { Button } from \"@components\";\nimport { useContract } from \"src/hooks/useContract\";\nimport { STAKING_ADDRESS } from \"src/constants\";\nimport StakingABI from \"src/abi/Staking.json\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { parseBalance } from \"src/utils\";\nimport { useRouter } from \"next/dist/client/router\";\nexport const RightStakeMenu = ({\n  id,\n  balance\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: reward,\n    1: setReward\n  } = useState(0);\n  const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n  const {\n    account\n  } = useWeb3React();\n  const router = useRouter();\n  useEffect(() => {\n    if (staking) {\n      staking.calculateReward(id, account).then(reward => setReward(reward));\n    }\n  }, [staking]);\n\n  const redeemTokens = async () => {\n    setLoading(true);\n\n    try {\n      if (staking) {\n        const tx = await (staking === null || staking === void 0 ? void 0 : staking.unstake(id));\n        await tx.wait();\n      }\n\n      router.reload();\n    } catch (err) {\n      console.log(err);\n    }\n\n    setLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"border flex-1 space-y-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"Amount Staked : \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: parseBalance(reward)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"Rewards Earned : \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: redeemTokens,\n      className: \"w-full\",\n      loading: loading,\n      children: \"Redeem\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/src/components/right-stake-menu/index.tsx"],"names":["React","useState","useEffect","Button","useContract","STAKING_ADDRESS","StakingABI","useWeb3React","parseBalance","useRouter","RightStakeMenu","id","balance","loading","setLoading","reward","setReward","staking","account","router","calculateReward","then","redeemTokens","tx","unstake","wait","reload","err","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,eAAT,QAAgC,eAAhC;AAEA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,SAAT,QAA0B,yBAA1B;AAEA,OAAO,MAAMC,cAAwC,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAAD,KAAqB;AACzE,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBb,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAA,OAACc,MAAD;AAAA,OAASC;AAAT,MAAsBf,QAAQ,CAAC,CAAD,CAApC;AACA,QAAMgB,OAAO,GAAGb,WAAW,CAACC,eAAD,EAAkBC,UAAlB,EAA8B,IAA9B,CAA3B;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAcX,YAAY,EAAhC;AACA,QAAMY,MAAM,GAAGV,SAAS,EAAxB;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIe,OAAJ,EAAa;AACTA,MAAAA,OAAO,CACFG,eADL,CACqBT,EADrB,EACyBO,OADzB,EAEKG,IAFL,CAEWN,MAAD,IAAoBC,SAAS,CAACD,MAAD,CAFvC;AAGH;AACJ,GANQ,EAMN,CAACE,OAAD,CANM,CAAT;;AAQA,QAAMK,YAAY,GAAG,YAAY;AAC7BR,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACA,UAAIG,OAAJ,EAAa;AACT,cAAMM,EAAE,GAAG,OAAMN,OAAN,aAAMA,OAAN,uBAAMA,OAAO,CAAEO,OAAT,CAAiBb,EAAjB,CAAN,CAAX;AACA,cAAMY,EAAE,CAACE,IAAH,EAAN;AACH;;AACDN,MAAAA,MAAM,CAACO,MAAP;AACH,KAND,CAME,OAAOC,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;;AACDb,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAZD;;AAaA,sBACI;AAAK,IAAA,SAAS,EAAC,yBAAf;AAAA,4BACI;AAAG,MAAA,SAAS,EAAC,yBAAb;AAAA,kDACoB;AAAA,kBAASN,YAAY,CAACO,MAAD;AAArB;AAAA;AAAA;AAAA;AAAA,cADpB;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAG,MAAA,SAAS,EAAC,yBAAb;AAAA,mDACqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADrB;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,eASI,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEO,YAAjB;AAA+B,MAAA,SAAS,EAAC,QAAzC;AAAkD,MAAA,OAAO,EAAET,OAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH,CA3CM","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Button } from \"@components\";\nimport { useContract } from \"src/hooks/useContract\";\nimport { STAKING_ADDRESS } from \"src/constants\";\nimport { PoolProps } from \"src/ts/interfaces\";\nimport StakingABI from \"src/abi/Staking.json\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { parseBalance } from \"src/utils\";\nimport { useRouter } from \"next/dist/client/router\";\n\nexport const RightStakeMenu: React.FC<{ id: number }> = ({ id, balance }) => {\n    const [loading, setLoading] = useState(false);\n    const [reward, setReward] = useState(0);\n    const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n    const { account } = useWeb3React();\n    const router = useRouter();\n\n    useEffect(() => {\n        if (staking) {\n            staking\n                .calculateReward(id, account)\n                .then((reward: number) => setReward(reward));\n        }\n    }, [staking]);\n\n    const redeemTokens = async () => {\n        setLoading(true);\n        try {\n            if (staking) {\n                const tx = await staking?.unstake(id);\n                await tx.wait();\n            }\n            router.reload();\n        } catch (err) {\n            console.log(err);\n        }\n        setLoading(false);\n    };\n    return (\n        <div className=\"border flex-1 space-y-2\">\n            <p className=\"text-base text-gray-300\">\n                Amount Staked : <strong>{parseBalance(reward)}</strong>\n            </p>\n\n            <p className=\"text-base text-gray-300\">\n                Rewards Earned : <strong>amount</strong>\n            </p>\n\n            <Button onClick={redeemTokens} className=\"w-full\" loading={loading}>\n                Redeem\n            </Button>\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}