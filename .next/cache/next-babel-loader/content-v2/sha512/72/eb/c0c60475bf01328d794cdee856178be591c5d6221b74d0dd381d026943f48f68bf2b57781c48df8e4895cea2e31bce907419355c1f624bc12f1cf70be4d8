{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Arshia Dhiman\\\\Solidity-Staking-Project\\\\staking-frontend\\\\src\\\\components\\\\staking-pool\\\\stake-menu\\\\withdraw\\\\index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport StakingABI from \"@abi/Staking.json\";\nimport { Button } from \"@components\";\nimport { useContract } from \"@hooks/useContract\";\nimport { STAKING_ADDRESS, knownErrors } from \"@src/constants\";\nimport { parseBalance } from \"@src/utils\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useDispatch } from \"react-redux\";\nimport { updatePools } from \"@src/features/staking/stakingSlice\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nexport var Withdraw = function Withdraw(_ref) {\n  _s();\n\n  var pool = _ref.pool;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var staking = useContract(STAKING_ADDRESS, StakingABI, true);\n\n  var _useWeb3React = useWeb3React(),\n      active = _useWeb3React.active,\n      account = _useWeb3React.account;\n\n  var dispatch = useDispatch();\n\n  var redeemTokens = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var tx, message;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.prev = 1;\n\n              if (!staking) {\n                _context.next = 11;\n                break;\n              }\n\n              toast.info(\"Awaiting successful transaction\");\n              _context.next = 6;\n              return staking === null || staking === void 0 ? void 0 : staking.unstake(pool.id);\n\n            case 6:\n              tx = _context.sent;\n              _context.next = 9;\n              return tx.wait();\n\n            case 9:\n              toast.success(\"Success\");\n              dispatch(updatePools(account || \"\"));\n\n            case 11:\n              _context.next = 18;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0.message);\n              message = knownErrors[_context.t0.message] || _context.t0.message;\n              toast.error(message);\n\n            case 18:\n              setLoading(false);\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 13]]);\n    }));\n\n    return function redeemTokens() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var getDaysLeft = function getDaysLeft(_deposit_time) {\n    var deposit_time = BigNumber.from(_deposit_time);\n\n    var _number_deposit_time = parseBalance(deposit_time);\n\n    var timestampInSeconds = Math.floor(Date.now() / 1000);\n    var seconds_locked = BigNumber.from(pool.lockPeriod);\n    var number_seconds_locked = parseBalance(seconds_locked);\n    var time_done = timestampInSeconds - parseInt(_number_deposit_time);\n    var seconds_left = parseInt(number_seconds_locked) - time_done;\n    var days_left = Math.floor(seconds_left / 86400);\n    return days_left;\n  }; // const timestampInSeconds = Math.floor(Date.now() / 1000);\n  // const DaysLeft =\n  //     timestampInSeconds -\n  //     parseBalance(BigNumber.from(pool.user_deposit_time));\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex-1 space-y-2 relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"Amount Staked\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        className: \"text-white\",\n        children: [parseBalance(pool.user_stake), \" ARSH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"Rewards Earned\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        className: \"text-white\",\n        children: [parseBalance(pool.user_reward), \" ARSH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"Days Left\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        className: \"text-white\",\n        children: getDaysLeft(pool.user_deposit_time)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: redeemTokens,\n      className: \"w-full absolute inset-x-0 bottom-0\",\n      loading: loading,\n      disabled: !active || pool.user_stake == \"0\",\n      children: \"Redeem\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(Withdraw, \"LVuj7UfD4vaoiiPvDNjh7GUHIqM=\", false, function () {\n  return [useContract, useWeb3React, useDispatch];\n});\n\n_c = Withdraw;\n\nvar _c;\n\n$RefreshReg$(_c, \"Withdraw\");","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/src/components/staking-pool/stake-menu/withdraw/index.tsx"],"names":["React","useState","toast","StakingABI","Button","useContract","STAKING_ADDRESS","knownErrors","parseBalance","useWeb3React","useDispatch","updatePools","BigNumber","Withdraw","pool","loading","setLoading","staking","active","account","dispatch","redeemTokens","info","unstake","id","tx","wait","success","console","log","message","error","getDaysLeft","_deposit_time","deposit_time","from","_number_deposit_time","timestampInSeconds","Math","floor","Date","now","seconds_locked","lockPeriod","number_seconds_locked","time_done","parseInt","seconds_left","days_left","user_stake","user_reward","user_deposit_time"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { toast } from \"react-toastify\";\n\nimport StakingABI from \"@abi/Staking.json\";\nimport { Button } from \"@components\";\nimport { useContract } from \"@hooks/useContract\";\nimport { STAKING_ADDRESS, knownErrors } from \"@src/constants\";\nimport { parseBalance } from \"@src/utils\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Pool } from \"@ts/interfaces\";\nimport { useDispatch } from \"react-redux\";\nimport { updatePools } from \"@src/features/staking/stakingSlice\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\n\nexport const Withdraw: React.FC<{\n    pool: Pool;\n}> = ({ pool }) => {\n    const [loading, setLoading] = useState(false);\n    const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n    const { active, account } = useWeb3React();\n    const dispatch = useDispatch();\n\n    const redeemTokens = async () => {\n        setLoading(true);\n        try {\n            if (staking) {\n                toast.info(\"Awaiting successful transaction\");\n                const tx = await staking?.unstake(pool.id);\n                await tx.wait();\n                toast.success(\"Success\");\n                dispatch(updatePools(account || \"\"));\n            }\n\n            // eslint-disable-next-line\n        } catch (err: any) {\n            console.log(err.message);\n\n            const message = knownErrors[err.message] || err.message;\n            toast.error(message);\n        }\n        setLoading(false);\n    };\n\n    const getDaysLeft = (_deposit_time: BigNumber) => {\n        const deposit_time = BigNumber.from(_deposit_time);\n        const _number_deposit_time = parseBalance(deposit_time);\n        const timestampInSeconds = Math.floor(Date.now() / 1000);\n        const seconds_locked = BigNumber.from(pool.lockPeriod);\n        const number_seconds_locked = parseBalance(seconds_locked);\n        const time_done = timestampInSeconds - parseInt(_number_deposit_time);\n\n        const seconds_left = parseInt(number_seconds_locked) - time_done;\n\n        const days_left = Math.floor(seconds_left / 86400);\n\n        return days_left;\n    };\n\n    // const timestampInSeconds = Math.floor(Date.now() / 1000);\n\n    // const DaysLeft =\n    //     timestampInSeconds -\n    //     parseBalance(BigNumber.from(pool.user_deposit_time));\n\n    return (\n        <div className=\"flex-1 space-y-2 relative\">\n            <p className=\"text-base text-gray-300\">\n                Amount Staked{\" \"}\n                <strong className=\"text-white\">\n                    {parseBalance(pool.user_stake)} ARSH\n                </strong>\n            </p>\n\n            <p className=\"text-base text-gray-300\">\n                Rewards Earned{\" \"}\n                <strong className=\"text-white\">\n                    {parseBalance(pool.user_reward)} ARSH\n                </strong>\n            </p>\n\n            <p className=\"text-base text-gray-300\">\n                Days Left{\" \"}\n                <strong className=\"text-white\">\n                    {getDaysLeft(pool.user_deposit_time)}\n                </strong>\n            </p>\n\n            <Button\n                onClick={redeemTokens}\n                className=\"w-full absolute inset-x-0 bottom-0\"\n                loading={loading}\n                disabled={!active || pool.user_stake == \"0\"}\n            >\n                Redeem\n            </Button>\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}