{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Arshia Dhiman\\\\Solidity-Staking-Project\\\\staking-frontend\\\\src\\\\components\\\\stake-menu\\\\index.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Input } from \"@components\";\nimport { useContract } from \"src/hooks/useContract\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { STAKING_ADDRESS, TOKEN_ADDRESS, LARGEST_NUM } from \"src/constants\";\nimport StakingABI from \"src/abi/Staking.json\";\nimport TokenABI from \"src/abi/Token.json\";\nimport { numberToWei, parseBalance } from \"src/utils\";\nimport { useRouter } from \"next/dist/client/router\";\nexport const StakeMenu = ({\n  balance,\n  id\n}) => {\n  const {\n    0: amount,\n    1: setAmount\n  } = useState(\"0\");\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: allowance,\n    1: setAllowance\n  } = useState(\"0\");\n  const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n  const token = useContract(TOKEN_ADDRESS, TokenABI, true);\n  const {\n    active,\n    account\n  } = useWeb3React();\n  const router = useRouter();\n\n  const redeemTokens = async () => {\n    setLoading(true);\n\n    try {\n      if (staking) {\n        const tx = await (staking === null || staking === void 0 ? void 0 : staking.unstake(id));\n        await tx.wait();\n      }\n    } catch (err) {\n      console.log(err);\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (token) {\n      token.allowance(account, STAKING_ADDRESS).then(allowance => setAllowance(allowance.toString()));\n    }\n  }, [token]);\n\n  const StakeMenuLeft = () => {\n    const {\n      0: amount,\n      1: setAmount\n    } = useState(\"0\");\n    const {\n      0: loading,\n      1: setLoading\n    } = useState(false);\n    const {\n      0: allowance,\n      1: setAllowance\n    } = useState(\"0\");\n    const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n    const token = useContract(TOKEN_ADDRESS, TokenABI, true);\n    const {\n      active,\n      account\n    } = useWeb3React();\n    const router = useRouter();\n\n    const stakeTokens = async () => {\n      setLoading(true);\n\n      try {\n        if (allowance === \"0\") {\n          const tx = await (token === null || token === void 0 ? void 0 : token.approve(STAKING_ADDRESS, LARGEST_NUM));\n          await tx.wait();\n        } else {\n          if (staking) {\n            const tx = await staking.stake(numberToWei(amount), id);\n            await tx.wait();\n          }\n        }\n\n        router.push(router.asPath);\n        setAmount(\"\");\n      } catch (err) {\n        console.log(err);\n      }\n\n      setLoading(false);\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 border space-y-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-base text-gray-300\",\n        children: [\"Amount After Stake : \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 42\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-base text-gray-300\",\n        children: [\"New Estimated Reward : \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 44\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          label: \"Stake Amount\",\n          id: \"amount\",\n          placeholder: \"Amount\",\n          value: amount,\n          type: \"number\",\n          onChange: e => setAmount(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: stakeTokens,\n          className: \"w-full\",\n          loading: loading,\n          children: allowance !== \"0\" ? \"Stake\" : \"Enable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center border\",\n      children: [\"Avalible : \", parseBalance(active ? balance : 0), \" ARSH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex p-6 space-x-6 border rounded-b-lg\",\n      children: [/*#__PURE__*/_jsxDEV(StakeMenuLeft, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"border flex-1 space-y-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-base text-gray-300\",\n          children: [\"Amount Staked : \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-base text-gray-300\",\n          children: [\"Rewards Earned : \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 42\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: redeemTokens,\n          className: \"w-full\",\n          loading: loading,\n          children: \"Redeem\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/src/components/stake-menu/index.tsx"],"names":["React","useState","useEffect","Button","Input","useContract","useWeb3React","STAKING_ADDRESS","TOKEN_ADDRESS","LARGEST_NUM","StakingABI","TokenABI","numberToWei","parseBalance","useRouter","StakeMenu","balance","id","amount","setAmount","loading","setLoading","allowance","setAllowance","staking","token","active","account","router","redeemTokens","tx","unstake","wait","err","console","log","then","toString","StakeMenuLeft","stakeTokens","approve","stake","push","asPath","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Button, Input } from \"@components\";\nimport { useContract } from \"src/hooks/useContract\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { STAKING_ADDRESS, TOKEN_ADDRESS, LARGEST_NUM } from \"src/constants\";\nimport { PoolProps } from \"src/ts/interfaces\";\nimport StakingABI from \"src/abi/Staking.json\";\nimport TokenABI from \"src/abi/Token.json\";\nimport { numberToWei, parseBalance } from \"src/utils\";\nimport { useRouter } from \"next/dist/client/router\";\n\nexport const StakeMenu: React.FC<PoolProps> = ({ balance, id }) => {\n    const [amount, setAmount] = useState(\"0\");\n    const [loading, setLoading] = useState(false);\n    const [allowance, setAllowance] = useState(\"0\");\n    const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n    const token = useContract(TOKEN_ADDRESS, TokenABI, true);\n    const { active, account } = useWeb3React();\n    const router = useRouter();\n\n    const redeemTokens = async () => {\n        setLoading(true);\n        try {\n            if (staking) {\n                const tx = await staking?.unstake(id);\n                await tx.wait();\n            }\n        } catch (err) {\n            console.log(err);\n        }\n        setLoading(false);\n    };\n\n    useEffect(() => {\n        if (token) {\n            token\n                .allowance(account, STAKING_ADDRESS)\n                .then((allowance: string) =>\n                    setAllowance(allowance.toString()),\n                );\n        }\n    }, [token]);\n\n    const StakeMenuLeft: React.FC = () => {\n        const [amount, setAmount] = useState(\"0\");\n        const [loading, setLoading] = useState(false);\n        const [allowance, setAllowance] = useState(\"0\");\n        const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n        const token = useContract(TOKEN_ADDRESS, TokenABI, true);\n        const { active, account } = useWeb3React();\n        const router = useRouter();\n\n        const stakeTokens = async () => {\n            setLoading(true);\n            try {\n                if (allowance === \"0\") {\n                    const tx = await token?.approve(\n                        STAKING_ADDRESS,\n                        LARGEST_NUM,\n                    );\n                    await tx.wait();\n                } else {\n                    if (staking) {\n                        const tx = await staking.stake(numberToWei(amount), id);\n                        await tx.wait();\n                    }\n                }\n                router.push(router.asPath);\n                setAmount(\"\");\n            } catch (err) {\n                console.log(err);\n            }\n            setLoading(false);\n        };\n\n        return (\n            <div className=\"flex-1 border space-y-2\">\n                <p className=\"text-base text-gray-300\">\n                    Amount After Stake : <strong>amount</strong>\n                </p>\n                <p className=\"text-base text-gray-300\">\n                    New Estimated Reward : <strong>amount</strong>\n                </p>\n                <div>\n                    <Input\n                        label=\"Stake Amount\"\n                        id=\"amount\"\n                        placeholder=\"Amount\"\n                        value={amount}\n                        type=\"number\"\n                        onChange={(e) => setAmount(e.target.value)}\n                    />\n                    <Button\n                        onClick={stakeTokens}\n                        className=\"w-full\"\n                        loading={loading}\n                    >\n                        {allowance !== \"0\" ? \"Stake\" : \"Enable\"}\n                    </Button>\n                </div>\n            </div>\n        );\n    };\n    return (\n        <div>\n            <div className=\"text-center border\">\n                Avalible : {parseBalance(active ? balance : 0)} ARSH\n            </div>\n            <div className=\"flex p-6 space-x-6 border rounded-b-lg\">\n                <StakeMenuLeft />\n                <div className=\"border flex-1 space-y-2\">\n                    <p className=\"text-base text-gray-300\">\n                        Amount Staked : <strong>amount</strong>\n                    </p>\n\n                    <p className=\"text-base text-gray-300\">\n                        Rewards Earned : <strong>amount</strong>\n                    </p>\n\n                    <Button\n                        onClick={redeemTokens}\n                        className=\"w-full\"\n                        loading={loading}\n                    >\n                        Redeem\n                    </Button>\n                </div>\n            </div>\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}