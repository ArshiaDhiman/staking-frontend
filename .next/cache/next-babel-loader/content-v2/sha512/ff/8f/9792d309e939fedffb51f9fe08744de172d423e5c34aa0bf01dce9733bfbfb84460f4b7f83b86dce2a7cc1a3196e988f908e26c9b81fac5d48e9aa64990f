{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { STAKING_ADDRESS } from \"src/constants\";\nimport ABI from \"src/abi/Staking.json\";\nimport { getContract, parseBalance } from \"src/utils\"; // Define a type for the slice state\n\n// Define the initial state using that type\nconst initialState = {\n  pools: []\n};\nexport const stakingSlice = createSlice({\n  name: \"staking\",\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    setPools: (state, action) => {\n      state.pools = action.payload;\n    }\n  }\n}); // whatever function the thunk returns should use .then (can't await)\n\nexport const updatePools = account => {\n  return dispatch => {\n    const staking = getContract(STAKING_ADDRESS, ABI); // eslint-disable-next-line\n\n    staking.getPools().then(async _pools => {\n      const pools = await Promise.all(_pools.map(async ({\n        poolName,\n        rewardRate,\n        lockPeriod,\n        totalStaked\n      }, id) => {\n        let user_info = \"0\";\n        let user_amount = \"0\";\n        let user_reward = \"0\";\n\n        if (account) {\n          user_info = await staking.getStakeholderInfo(id, account);\n          console.log(parseBalance(user_info[1]));\n        }\n\n        const _user_deposit_time = parseBalance(user_info[0]);\n\n        const _user_amount = parseBalance(user_info[1]);\n\n        const _user_reward = parseBalance(user_info[2]);\n\n        return {\n          name: poolName,\n          rewardRate: rewardRate.toString(),\n          lockPeriod: lockPeriod.toString(),\n          totalStaked: totalStaked.toString(),\n          id: id,\n          user_deposit_time: _user_deposit_time.toString(),\n          user_amount: _user_amount.toString(),\n          user_reward: _user_reward.toString()\n        };\n      }));\n      dispatch(setPools(pools));\n    });\n  };\n}; // setPools is an action\n\nexport const {\n  setPools\n} = stakingSlice.actions;\nexport default stakingSlice.reducer;","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/src/features/staking/stakingSlice.ts"],"names":["createSlice","STAKING_ADDRESS","ABI","getContract","parseBalance","initialState","pools","stakingSlice","name","reducers","setPools","state","action","payload","updatePools","account","dispatch","staking","getPools","then","_pools","Promise","all","map","poolName","rewardRate","lockPeriod","totalStaked","id","user_info","user_amount","user_reward","getStakeholderInfo","console","log","_user_deposit_time","_user_amount","_user_reward","toString","user_deposit_time","actions","reducer"],"mappings":"AAAA,SACIA,WADJ,QAKO,kBALP;AASA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,WAA1C,C,CAEA;;AAKA;AACA,MAAMC,YAA0B,GAAG;AAC/BC,EAAAA,KAAK,EAAE;AADwB,CAAnC;AAIA,OAAO,MAAMC,YAAY,GAAGP,WAAW,CAAC;AACpCQ,EAAAA,IAAI,EAAE,SAD8B;AAEpC;AACAH,EAAAA,YAHoC;AAIpCI,EAAAA,QAAQ,EAAE;AACNC,IAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAA0C;AAChDD,MAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACC,OAArB;AACH;AAHK;AAJ0B,CAAD,CAAhC,C,CAWP;;AACA,OAAO,MAAMC,WAAW,GAAIC,OAAD,IAAsB;AAC7C,SAAQC,QAAD,IAA4D;AAC/D,UAAMC,OAAO,GAAGd,WAAW,CAACF,eAAD,EAAkBC,GAAlB,CAA3B,CAD+D,CAE/D;;AACAe,IAAAA,OAAO,CAACC,QAAR,GAAmBC,IAAnB,CAAwB,MAAOC,MAAP,IAAyB;AAC7C,YAAMd,KAAK,GAAG,MAAMe,OAAO,CAACC,GAAR,CAChBF,MAAM,CAACG,GAAP,CACI,OACI;AAAEC,QAAAA,QAAF;AAAYC,QAAAA,UAAZ;AAAwBC,QAAAA,UAAxB;AAAoCC,QAAAA;AAApC,OADJ,EAEIC,EAFJ,KAGK;AACD,YAAIC,SAAS,GAAG,GAAhB;AACA,YAAIC,WAAW,GAAG,GAAlB;AACA,YAAIC,WAAW,GAAG,GAAlB;;AAEA,YAAIhB,OAAJ,EAAa;AACTc,UAAAA,SAAS,GAAG,MAAMZ,OAAO,CAACe,kBAAR,CACdJ,EADc,EAEdb,OAFc,CAAlB;AAKAkB,UAAAA,OAAO,CAACC,GAAR,CAAY9B,YAAY,CAACyB,SAAS,CAAC,CAAD,CAAV,CAAxB;AACH;;AACD,cAAMM,kBAAkB,GAAG/B,YAAY,CAACyB,SAAS,CAAC,CAAD,CAAV,CAAvC;;AACA,cAAMO,YAAY,GAAGhC,YAAY,CAACyB,SAAS,CAAC,CAAD,CAAV,CAAjC;;AACA,cAAMQ,YAAY,GAAGjC,YAAY,CAACyB,SAAS,CAAC,CAAD,CAAV,CAAjC;;AAEA,eAAO;AACHrB,UAAAA,IAAI,EAAEgB,QADH;AAEHC,UAAAA,UAAU,EAAEA,UAAU,CAACa,QAAX,EAFT;AAGHZ,UAAAA,UAAU,EAAEA,UAAU,CAACY,QAAX,EAHT;AAIHX,UAAAA,WAAW,EAAEA,WAAW,CAACW,QAAZ,EAJV;AAKHV,UAAAA,EAAE,EAAEA,EALD;AAMHW,UAAAA,iBAAiB,EAAEJ,kBAAkB,CAACG,QAAnB,EANhB;AAOHR,UAAAA,WAAW,EAAEM,YAAY,CAACE,QAAb,EAPV;AAQHP,UAAAA,WAAW,EAAEM,YAAY,CAACC,QAAb;AARV,SAAP;AAUH,OA/BL,CADgB,CAApB;AAoCAtB,MAAAA,QAAQ,CAACN,QAAQ,CAACJ,KAAD,CAAT,CAAR;AACH,KAtCD;AAuCH,GA1CD;AA2CH,CA5CM,C,CA8CP;;AACA,OAAO,MAAM;AAAEI,EAAAA;AAAF,IAAeH,YAAY,CAACiC,OAAlC;AAEP,eAAejC,YAAY,CAACkC,OAA5B","sourcesContent":["import {\n    createSlice,\n    PayloadAction,\n    ThunkDispatch,\n    Action,\n} from \"@reduxjs/toolkit\";\nimport { RootState } from \"@src/store\";\nimport { Pool } from \"@ts/interfaces\";\n\nimport { STAKING_ADDRESS } from \"src/constants\";\nimport ABI from \"src/abi/Staking.json\";\nimport { getContract, parseBalance } from \"src/utils\";\n\n// Define a type for the slice state\ninterface StakingState {\n    pools: Pool[];\n}\n\n// Define the initial state using that type\nconst initialState: StakingState = {\n    pools: [],\n};\n\nexport const stakingSlice = createSlice({\n    name: \"staking\",\n    // `createSlice` will infer the state type from the `initialState` argument\n    initialState,\n    reducers: {\n        setPools: (state, action: PayloadAction<Pool[]>) => {\n            state.pools = action.payload;\n        },\n    },\n});\n\n// whatever function the thunk returns should use .then (can't await)\nexport const updatePools = (account?: string) => {\n    return (dispatch: ThunkDispatch<RootState, void, Action>): void => {\n        const staking = getContract(STAKING_ADDRESS, ABI);\n        // eslint-disable-next-line\n        staking.getPools().then(async (_pools: any[]) => {\n            const pools = await Promise.all(\n                _pools.map(\n                    async (\n                        { poolName, rewardRate, lockPeriod, totalStaked },\n                        id,\n                    ) => {\n                        let user_info = \"0\";\n                        let user_amount = \"0\";\n                        let user_reward = \"0\";\n\n                        if (account) {\n                            user_info = await staking.getStakeholderInfo(\n                                id,\n                                account,\n                            );\n\n                            console.log(parseBalance(user_info[1]));\n                        }\n                        const _user_deposit_time = parseBalance(user_info[0]);\n                        const _user_amount = parseBalance(user_info[1]);\n                        const _user_reward = parseBalance(user_info[2]);\n\n                        return {\n                            name: poolName,\n                            rewardRate: rewardRate.toString(),\n                            lockPeriod: lockPeriod.toString(),\n                            totalStaked: totalStaked.toString(),\n                            id: id,\n                            user_deposit_time: _user_deposit_time.toString(),\n                            user_amount: _user_amount.toString(),\n                            user_reward: _user_reward.toString(),\n                        };\n                    },\n                ),\n            );\n\n            dispatch(setPools(pools));\n        });\n    };\n};\n\n// setPools is an action\nexport const { setPools } = stakingSlice.actions;\n\nexport default stakingSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}