{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Arshia Dhiman\\\\Solidity-Staking-Project\\\\staking-frontend\\\\src\\\\components\\\\left-stake-menu\\\\index.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Input } from \"@components\";\nimport { useContract } from \"src/hooks/useContract\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { STAKING_ADDRESS, TOKEN_ADDRESS, LARGEST_NUM } from \"src/constants\";\nimport StakingABI from \"src/abi/Staking.json\";\nimport TokenABI from \"src/abi/Token.json\";\nimport { useRouter } from \"next/dist/client/router\";\nimport { parseBalance, numberToWei } from \"src/utils\";\nimport { toast } from \"react-toastify\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nexport const LeftStakeMenu = ({\n  id,\n  stakedAmount\n}) => {\n  const {\n    0: amount,\n    1: setAmount\n  } = useState(\"0\"); // const [newAmount, setNewAmount] = useState(\"\");\n\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: allowance,\n    1: setAllowance\n  } = useState(\"0\");\n  const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n  const token = useContract(TOKEN_ADDRESS, TokenABI, true);\n  const {\n    account\n  } = useWeb3React();\n  const router = useRouter(); // console.log(stakedAmount);\n  // console.log(amount);\n\n  const stakeTokens = async () => {\n    setLoading(true);\n\n    try {\n      if (allowance === \"0\") {\n        toast.info(\"Awaiting successful transaction\");\n        const tx = await (token === null || token === void 0 ? void 0 : token.approve(STAKING_ADDRESS, LARGEST_NUM));\n        await tx.wait();\n        toast.success(\"Success\");\n      } else {\n        if (staking) {\n          const tx = await staking.stake(numberToWei(amount), id);\n          await tx.wait();\n        }\n      }\n\n      setAmount(\"\"); // eslint-disable-next-line\n    } catch (err) {\n      console.log(err);\n      toast.error(err);\n    }\n\n    setLoading(false);\n  }; // const newTotal = (_amount: string, oldAmount: string) => {\n  //     const total = parseInt(_amount) + parseInt(oldAmount);\n  //     const _total = total.toString();\n  //     setNewAmount(_total);\n  // };\n  // const newReward = (amount) => {\n  //     const reward = (amount * pool.rewardRate * rewardTime) / rewardinterval;\n  // };\n  // useEffect(() => {\n  //     const _amount = newTotal(amount, stakedAmount);\n  //     setNewAmount(_amount);\n  //     console.log(newAmount);\n  // }, [amount]);\n  // const logInput = (e: string) => {\n  //     if (e === \"0\") {\n  //         setAmount(\"0\");\n  //         setNewAmount(\"0\");\n  //     } else {\n  //         setAmount(e);\n  //         newTotal(amount, stakedAmount);\n  //     }\n  // };\n\n\n  useEffect(() => {\n    if (token) {\n      token.allowance(account, STAKING_ADDRESS).then(allowance => setAllowance(allowance.toString()));\n    }\n  }, [token]);\n  const amountAfterStake = BigNumber.from(stakedAmount).add(numberToWei(amount));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex-1 space-y-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"Amount After Stake :\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [parseBalance(amountAfterStake), \" ARSH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"New Estimated Reward : \", /*#__PURE__*/_jsxDEV(\"strong\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 40\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        label: \"Stake Amount\",\n        id: \"amount\",\n        placeholder: \"Amount\",\n        value: amount,\n        type: \"number\",\n        onChange: e => setAmount(e.target.value || \"0\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: stakeTokens,\n        className: \"w-full\",\n        loading: loading,\n        children: allowance !== \"0\" ? \"Stake\" : \"Enable\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/src/components/left-stake-menu/index.tsx"],"names":["React","useState","useEffect","Button","Input","useContract","useWeb3React","STAKING_ADDRESS","TOKEN_ADDRESS","LARGEST_NUM","StakingABI","TokenABI","useRouter","parseBalance","numberToWei","toast","BigNumber","LeftStakeMenu","id","stakedAmount","amount","setAmount","loading","setLoading","allowance","setAllowance","staking","token","account","router","stakeTokens","info","tx","approve","wait","success","stake","err","console","log","error","then","toString","amountAfterStake","from","add","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Button, Input } from \"@components\";\nimport { useContract } from \"src/hooks/useContract\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { STAKING_ADDRESS, TOKEN_ADDRESS, LARGEST_NUM } from \"src/constants\";\nimport StakingABI from \"src/abi/Staking.json\";\nimport TokenABI from \"src/abi/Token.json\";\nimport { useRouter } from \"next/dist/client/router\";\nimport { parseBalance, numberToWei } from \"src/utils\";\nimport { toast } from \"react-toastify\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\n\nexport const LeftStakeMenu: React.FC<{\n    id: number;\n    stakedAmount: string;\n    reward: string;\n}> = ({ id, stakedAmount }) => {\n    const [amount, setAmount] = useState(\"0\");\n    // const [newAmount, setNewAmount] = useState(\"\");\n    const [loading, setLoading] = useState(false);\n    const [allowance, setAllowance] = useState(\"0\");\n    const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n    const token = useContract(TOKEN_ADDRESS, TokenABI, true);\n    const { account } = useWeb3React();\n    const router = useRouter();\n    // console.log(stakedAmount);\n    // console.log(amount);\n\n    const stakeTokens = async () => {\n        setLoading(true);\n        try {\n            if (allowance === \"0\") {\n                toast.info(\"Awaiting successful transaction\");\n                const tx = await token?.approve(STAKING_ADDRESS, LARGEST_NUM);\n                await tx.wait();\n                toast.success(\"Success\");\n            } else {\n                if (staking) {\n                    const tx = await staking.stake(numberToWei(amount), id);\n                    await tx.wait();\n                }\n            }\n\n            setAmount(\"\");\n            // eslint-disable-next-line\n        } catch (err: any) {\n            console.log(err);\n            toast.error(err);\n        }\n        setLoading(false);\n    };\n\n    // const newTotal = (_amount: string, oldAmount: string) => {\n    //     const total = parseInt(_amount) + parseInt(oldAmount);\n    //     const _total = total.toString();\n    //     setNewAmount(_total);\n    // };\n\n    // const newReward = (amount) => {\n    //     const reward = (amount * pool.rewardRate * rewardTime) / rewardinterval;\n    // };\n\n    // useEffect(() => {\n    //     const _amount = newTotal(amount, stakedAmount);\n    //     setNewAmount(_amount);\n    //     console.log(newAmount);\n    // }, [amount]);\n\n    // const logInput = (e: string) => {\n    //     if (e === \"0\") {\n    //         setAmount(\"0\");\n    //         setNewAmount(\"0\");\n    //     } else {\n    //         setAmount(e);\n    //         newTotal(amount, stakedAmount);\n    //     }\n    // };\n\n    useEffect(() => {\n        if (token) {\n            token\n                .allowance(account, STAKING_ADDRESS)\n                .then((allowance: string) =>\n                    setAllowance(allowance.toString()),\n                );\n        }\n    }, [token]);\n\n    const amountAfterStake = BigNumber.from(stakedAmount).add(\n        numberToWei(amount),\n    );\n\n    return (\n        <div className=\"flex-1 space-y-2\">\n            <p className=\"text-base text-gray-300\">\n                Amount After Stake :{\" \"}\n                <strong>{parseBalance(amountAfterStake)} ARSH</strong>\n            </p>\n            <p className=\"text-base text-gray-300\">\n                New Estimated Reward : <strong></strong>\n            </p>\n            <div>\n                <Input\n                    label=\"Stake Amount\"\n                    id=\"amount\"\n                    placeholder=\"Amount\"\n                    value={amount}\n                    type=\"number\"\n                    onChange={(e) => setAmount(e.target.value || \"0\")}\n                />\n                <Button\n                    onClick={stakeTokens}\n                    className=\"w-full\"\n                    loading={loading}\n                >\n                    {allowance !== \"0\" ? \"Stake\" : \"Enable\"}\n                </Button>\n            </div>\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}