{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injected } from \"src/connectors\";\nexport function useEagerConnect() {\n  const {\n    activate,\n    active\n  } = useWeb3React();\n  const {\n    0: tried,\n    1: setTried\n  } = useState(false);\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, [activate]); // if the connection worked, wait until we get confirmation of that to flip the flag\n\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n  return tried;\n}","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/src/hooks/useEagerConnect.tsx"],"names":["useEffect","useState","useWeb3React","injected","useEagerConnect","activate","active","tried","setTried","isAuthorized","then","undefined","catch"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AAEA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,OAAO,SAASC,eAAT,GAAoC;AACvC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAuBJ,YAAY,EAAzC;AAEA,QAAM;AAAA,OAACK,KAAD;AAAA,OAAQC;AAAR,MAAoBP,QAAQ,CAAC,KAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZG,IAAAA,QAAQ,CAACM,YAAT,GAAwBC,IAAxB,CAA8BD,YAAD,IAAkB;AAC3C,UAAIA,YAAJ,EAAkB;AACdJ,QAAAA,QAAQ,CAACF,QAAD,EAAWQ,SAAX,EAAsB,IAAtB,CAAR,CAAoCC,KAApC,CAA0C,MAAM;AAC5CJ,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,SAFD;AAGH,OAJD,MAIO;AACHA,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ,KARD;AASH,GAVQ,EAUN,CAACH,QAAD,CAVM,CAAT,CALuC,CAiBvC;;AACAL,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACO,KAAD,IAAUD,MAAd,EAAsB;AAClBE,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ,GAJQ,EAIN,CAACD,KAAD,EAAQD,MAAR,CAJM,CAAT;AAMA,SAAOC,KAAP;AACH","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nimport { injected } from \"src/connectors\";\n\nexport function useEagerConnect(): boolean {\n    const { activate, active } = useWeb3React();\n\n    const [tried, setTried] = useState(false);\n\n    useEffect(() => {\n        injected.isAuthorized().then((isAuthorized) => {\n            if (isAuthorized) {\n                activate(injected, undefined, true).catch(() => {\n                    setTried(true);\n                });\n            } else {\n                setTried(true);\n            }\n        });\n    }, [activate]);\n\n    // if the connection worked, wait until we get confirmation of that to flip the flag\n    useEffect(() => {\n        if (!tried && active) {\n            setTried(true);\n        }\n    }, [tried, active]);\n\n    return tried;\n}\n"]},"metadata":{},"sourceType":"module"}