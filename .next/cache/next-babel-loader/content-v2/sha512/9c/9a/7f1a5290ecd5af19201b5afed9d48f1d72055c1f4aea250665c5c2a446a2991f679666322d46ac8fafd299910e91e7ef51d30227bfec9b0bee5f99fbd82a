{"ast":null,"code":"import { Contract } from \"@ethersproject/contracts\";\nimport { InfuraProvider } from \"@ethersproject/providers\";\nvar library = new InfuraProvider(\"rinkeby\");\nexport function shortenHex(hex) {\n  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  return \"\".concat(hex.substring(0, length + 2), \"\\u2026\").concat(hex.substring(hex.length - length));\n}\nexport function getContract(address, ABI) {\n  return new Contract(address, ABI, library);\n}\nexport function convertHMS(value) {\n  var sec = parseInt(value, 10); // convert value to number if it's string\n\n  var hours = Math.floor(sec / 3600); // get hours\n\n  var minutes = Math.floor((sec - hours * 3600) / 60); // get minutes\n\n  var seconds = sec - hours * 3600 - minutes * 60; //  get seconds\n  // add 0 if value < 10; Example: 2 => 02\n\n  if (hours < 10) {\n    hours = \"0\" + hours;\n  }\n\n  if (minutes < 10) {\n    minutes = \"0\" + minutes;\n  }\n\n  if (seconds < 10) {\n    seconds = \"0\" + seconds;\n  }\n\n  return hours + \":\" + minutes + \":\" + seconds; // Return is HH : MM : SS\n}","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/src/utils.ts"],"names":["Contract","InfuraProvider","library","shortenHex","hex","length","substring","getContract","address","ABI","convertHMS","value","sec","parseInt","hours","Math","floor","minutes","seconds"],"mappings":"AAAA,SAASA,QAAT,QAA4C,0BAA5C;AACA,SAASC,cAAT,QAA+B,0BAA/B;AAEA,IAAMC,OAAO,GAAG,IAAID,cAAJ,CAAmB,SAAnB,CAAhB;AAEA,OAAO,SAASE,UAAT,CAAoBC,GAApB,EAAqD;AAAA,MAApBC,MAAoB,uEAAX,CAAW;AACxD,mBAAUD,GAAG,CAACE,SAAJ,CAAc,CAAd,EAAiBD,MAAM,GAAG,CAA1B,CAAV,mBAA0CD,GAAG,CAACE,SAAJ,CACtCF,GAAG,CAACC,MAAJ,GAAaA,MADyB,CAA1C;AAGH;AAED,OAAO,SAASE,WAAT,CAAqBC,OAArB,EAAsCC,GAAtC,EAAwE;AAC3E,SAAO,IAAIT,QAAJ,CAAaQ,OAAb,EAAsBC,GAAtB,EAA2BP,OAA3B,CAAP;AACH;AAED,OAAO,SAASQ,UAAT,CAAoBC,KAApB,EAA2C;AAC9C,MAAMC,GAAG,GAAGC,QAAQ,CAACF,KAAD,EAAQ,EAAR,CAApB,CAD8C,CACb;;AACjC,MAAIG,KAAsB,GAAGC,IAAI,CAACC,KAAL,CAAWJ,GAAG,GAAG,IAAjB,CAA7B,CAF8C,CAEO;;AACrD,MAAIK,OAAwB,GAAGF,IAAI,CAACC,KAAL,CAAW,CAACJ,GAAG,GAAGE,KAAK,GAAG,IAAf,IAAuB,EAAlC,CAA/B,CAH8C,CAGwB;;AACtE,MAAII,OAAwB,GAAGN,GAAG,GAAGE,KAAK,GAAG,IAAd,GAAqBG,OAAO,GAAG,EAA9D,CAJ8C,CAIoB;AAClE;;AACA,MAAIH,KAAK,GAAG,EAAZ,EAAgB;AACZA,IAAAA,KAAK,GAAG,MAAMA,KAAd;AACH;;AACD,MAAIG,OAAO,GAAG,EAAd,EAAkB;AACdA,IAAAA,OAAO,GAAG,MAAMA,OAAhB;AACH;;AACD,MAAIC,OAAO,GAAG,EAAd,EAAkB;AACdA,IAAAA,OAAO,GAAG,MAAMA,OAAhB;AACH;;AACD,SAAOJ,KAAK,GAAG,GAAR,GAAcG,OAAd,GAAwB,GAAxB,GAA8BC,OAArC,CAf8C,CAeA;AACjD","sourcesContent":["import { Contract, ContractInterface } from \"@ethersproject/contracts\";\nimport { InfuraProvider } from \"@ethersproject/providers\";\n\nconst library = new InfuraProvider(\"rinkeby\");\n\nexport function shortenHex(hex: string, length = 4): string {\n    return `${hex.substring(0, length + 2)}â€¦${hex.substring(\n        hex.length - length,\n    )}`;\n}\n\nexport function getContract(address: string, ABI: ContractInterface): Contract {\n    return new Contract(address, ABI, library);\n}\n\nexport function convertHMS(value: string): string {\n    const sec = parseInt(value, 10); // convert value to number if it's string\n    let hours: string | number = Math.floor(sec / 3600); // get hours\n    let minutes: string | number = Math.floor((sec - hours * 3600) / 60); // get minutes\n    let seconds: string | number = sec - hours * 3600 - minutes * 60; //  get seconds\n    // add 0 if value < 10; Example: 2 => 02\n    if (hours < 10) {\n        hours = \"0\" + hours;\n    }\n    if (minutes < 10) {\n        minutes = \"0\" + minutes;\n    }\n    if (seconds < 10) {\n        seconds = \"0\" + seconds;\n    }\n    return hours + \":\" + minutes + \":\" + seconds; // Return is HH : MM : SS\n}\n"]},"metadata":{},"sourceType":"module"}