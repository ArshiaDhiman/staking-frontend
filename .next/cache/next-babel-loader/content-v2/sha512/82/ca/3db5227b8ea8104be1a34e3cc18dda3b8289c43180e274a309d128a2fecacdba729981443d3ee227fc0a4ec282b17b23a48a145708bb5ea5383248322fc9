{"ast":null,"code":"import { Contract } from \"@ethersproject/contracts\";\nimport { InfuraProvider } from \"@ethersproject/providers\";\nimport { commify, formatUnits, parseEther } from \"@ethersproject/units\";\nconst library = new InfuraProvider(\"rinkeby\");\nexport function shortenHex(hex, length = 4) {\n  return `${hex.substring(0, length + 2)}…${hex.substring(hex.length - length)}`;\n}\nexport function getContract(address, ABI) {\n  return new Contract(address, ABI, library);\n}\nexport function secondsToWeeks(_seconds) {\n  const seconds = parseInt(_seconds);\n  const months = seconds / 604800;\n  return months;\n}\nexport const parseBalance = (balance, decimals = 18, decimalsToDisplay = 2) => commify(Number(formatUnits(balance, decimals)).toFixed(decimalsToDisplay));\nexport const numberToWei = number => {\n  return parseEther(number.replace(/[^\\d\\.\\-]/g, \"\")).toString();\n};","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/src/utils.ts"],"names":["Contract","InfuraProvider","commify","formatUnits","parseEther","library","shortenHex","hex","length","substring","getContract","address","ABI","secondsToWeeks","_seconds","seconds","parseInt","months","parseBalance","balance","decimals","decimalsToDisplay","Number","toFixed","numberToWei","number","replace","toString"],"mappings":"AAAA,SAASA,QAAT,QAA4C,0BAA5C;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,UAA/B,QAAiD,sBAAjD;AAGA,MAAMC,OAAO,GAAG,IAAIJ,cAAJ,CAAmB,SAAnB,CAAhB;AAEA,OAAO,SAASK,UAAT,CAAoBC,GAApB,EAAiCC,MAAM,GAAG,CAA1C,EAAqD;AACxD,SAAQ,GAAED,GAAG,CAACE,SAAJ,CAAc,CAAd,EAAiBD,MAAM,GAAG,CAA1B,CAA6B,IAAGD,GAAG,CAACE,SAAJ,CACtCF,GAAG,CAACC,MAAJ,GAAaA,MADyB,CAExC,EAFF;AAGH;AAED,OAAO,SAASE,WAAT,CAAqBC,OAArB,EAAsCC,GAAtC,EAAwE;AAC3E,SAAO,IAAIZ,QAAJ,CAAaW,OAAb,EAAsBC,GAAtB,EAA2BP,OAA3B,CAAP;AACH;AAED,OAAO,SAASQ,cAAT,CAAwBC,QAAxB,EAAkD;AACrD,QAAMC,OAAO,GAAGC,QAAQ,CAACF,QAAD,CAAxB;AACA,QAAMG,MAAM,GAAGF,OAAO,GAAG,MAAzB;AACA,SAAOE,MAAP;AACH;AAED,OAAO,MAAMC,YAAY,GAAG,CACxBC,OADwB,EAExBC,QAAQ,GAAG,EAFa,EAGxBC,iBAAiB,GAAG,CAHI,KAKxBnB,OAAO,CAACoB,MAAM,CAACnB,WAAW,CAACgB,OAAD,EAAUC,QAAV,CAAZ,CAAN,CAAuCG,OAAvC,CAA+CF,iBAA/C,CAAD,CALJ;AAOP,OAAO,MAAMG,WAAW,GAAIC,MAAD,IAA4B;AACnD,SAAOrB,UAAU,CAACqB,MAAM,CAACC,OAAP,CAAe,YAAf,EAA6B,EAA7B,CAAD,CAAV,CAA6CC,QAA7C,EAAP;AACH,CAFM","sourcesContent":["import { Contract, ContractInterface } from \"@ethersproject/contracts\";\nimport { InfuraProvider } from \"@ethersproject/providers\";\nimport { commify, formatUnits, parseEther } from \"@ethersproject/units\";\nimport { BigNumberish } from \"@ethersproject/bignumber\";\n\nconst library = new InfuraProvider(\"rinkeby\");\n\nexport function shortenHex(hex: string, length = 4): string {\n    return `${hex.substring(0, length + 2)}…${hex.substring(\n        hex.length - length,\n    )}`;\n}\n\nexport function getContract(address: string, ABI: ContractInterface): Contract {\n    return new Contract(address, ABI, library);\n}\n\nexport function secondsToWeeks(_seconds: string): number {\n    const seconds = parseInt(_seconds);\n    const months = seconds / 604800;\n    return months;\n}\n\nexport const parseBalance = (\n    balance: BigNumberish,\n    decimals = 18,\n    decimalsToDisplay = 2,\n): string =>\n    commify(Number(formatUnits(balance, decimals)).toFixed(decimalsToDisplay));\n\nexport const numberToWei = (number: string): string => {\n    return parseEther(number.replace(/[^\\d\\.\\-]/g, \"\")).toString();\n};\n"]},"metadata":{},"sourceType":"module"}