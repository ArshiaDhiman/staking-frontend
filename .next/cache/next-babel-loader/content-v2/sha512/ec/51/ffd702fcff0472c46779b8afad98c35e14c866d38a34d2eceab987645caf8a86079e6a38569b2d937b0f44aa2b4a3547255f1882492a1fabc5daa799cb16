{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Arshia Dhiman\\\\Solidity-Staking-Project\\\\staking-frontend\\\\src\\\\components\\\\left-stake-menu\\\\index.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Input } from \"@components\";\nimport { useContract } from \"src/hooks/useContract\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { STAKING_ADDRESS, TOKEN_ADDRESS, LARGEST_NUM } from \"src/constants\";\nimport StakingABI from \"src/abi/Staking.json\";\nimport TokenABI from \"src/abi/Token.json\";\nimport { numberToWei } from \"src/utils\";\nimport { useRouter } from \"next/dist/client/router\";\n\nconst LeftStakeMenu = ({\n  balance,\n  id\n}) => {\n  const {\n    0: amount,\n    1: setAmount\n  } = useState(\"0\");\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: allowance,\n    1: setAllowance\n  } = useState(\"0\");\n  const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n  const token = useContract(TOKEN_ADDRESS, TokenABI, true);\n  const {\n    active,\n    account\n  } = useWeb3React();\n  const router = useRouter();\n\n  const stakeTokens = async () => {\n    setLoading(true);\n\n    try {\n      if (allowance === \"0\") {\n        const tx = await (token === null || token === void 0 ? void 0 : token.approve(STAKING_ADDRESS, LARGEST_NUM));\n        await tx.wait();\n      } else {\n        if (staking) {\n          const tx = await staking.stake(numberToWei(amount), id);\n          await tx.wait();\n        }\n      }\n\n      router.push(router.asPath);\n      setAmount(\"\");\n    } catch (err) {\n      console.log(err);\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (token) {\n      token.allowance(account, STAKING_ADDRESS).then(allowance => setAllowance(allowance.toString()));\n    }\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex-1 border space-y-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"Amount After Stake : \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 38\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"New Estimated Reward : \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 40\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        label: \"Stake Amount\",\n        id: \"amount\",\n        placeholder: \"Amount\",\n        value: amount,\n        type: \"number\",\n        onChange: e => setAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: stakeTokens,\n        className: \"w-full\",\n        loading: loading,\n        children: allowance !== \"0\" ? \"Stake\" : \"Enable\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/src/components/left-stake-menu/index.tsx"],"names":["React","useState","useEffect","Button","Input","useContract","useWeb3React","STAKING_ADDRESS","TOKEN_ADDRESS","LARGEST_NUM","StakingABI","TokenABI","numberToWei","useRouter","LeftStakeMenu","balance","id","amount","setAmount","loading","setLoading","allowance","setAllowance","staking","token","active","account","router","stakeTokens","tx","approve","wait","stake","push","asPath","err","console","log","then","toString","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Button, Input } from \"@components\";\r\nimport { useContract } from \"src/hooks/useContract\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport { STAKING_ADDRESS, TOKEN_ADDRESS, LARGEST_NUM } from \"src/constants\";\r\nimport { PoolProps } from \"src/ts/interfaces\";\r\nimport StakingABI from \"src/abi/Staking.json\";\r\nimport TokenABI from \"src/abi/Token.json\";\r\nimport { numberToWei, parseBalance } from \"src/utils\";\r\nimport { useRouter } from \"next/dist/client/router\";\r\n\r\nconst LeftStakeMenu: React.FC<PoolProps> = ({ balance, id }) => {\r\n    const [amount, setAmount] = useState(\"0\");\r\n    const [loading, setLoading] = useState(false);\r\n    const [allowance, setAllowance] = useState(\"0\");\r\n    const staking = useContract(STAKING_ADDRESS, StakingABI, true);\r\n    const token = useContract(TOKEN_ADDRESS, TokenABI, true);\r\n    const { active, account } = useWeb3React();\r\n    const router = useRouter();\r\n\r\n    const stakeTokens = async () => {\r\n        setLoading(true);\r\n        try {\r\n            if (allowance === \"0\") {\r\n                const tx = await token?.approve(STAKING_ADDRESS, LARGEST_NUM);\r\n                await tx.wait();\r\n            } else {\r\n                if (staking) {\r\n                    const tx = await staking.stake(numberToWei(amount), id);\r\n                    await tx.wait();\r\n                }\r\n            }\r\n            router.push(router.asPath);\r\n            setAmount(\"\");\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (token) {\r\n            token\r\n                .allowance(account, STAKING_ADDRESS)\r\n                .then((allowance: string) =>\r\n                    setAllowance(allowance.toString()),\r\n                );\r\n        }\r\n    }, [token]);\r\n\r\n    return (\r\n        <div className=\"flex-1 border space-y-2\">\r\n            <p className=\"text-base text-gray-300\">\r\n                Amount After Stake : <strong>amount</strong>\r\n            </p>\r\n            <p className=\"text-base text-gray-300\">\r\n                New Estimated Reward : <strong>amount</strong>\r\n            </p>\r\n            <div>\r\n                <Input\r\n                    label=\"Stake Amount\"\r\n                    id=\"amount\"\r\n                    placeholder=\"Amount\"\r\n                    value={amount}\r\n                    type=\"number\"\r\n                    onChange={(e) => setAmount(e.target.value)}\r\n                />\r\n                <Button\r\n                    onClick={stakeTokens}\r\n                    className=\"w-full\"\r\n                    loading={loading}\r\n                >\r\n                    {allowance !== \"0\" ? \"Stake\" : \"Enable\"}\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}