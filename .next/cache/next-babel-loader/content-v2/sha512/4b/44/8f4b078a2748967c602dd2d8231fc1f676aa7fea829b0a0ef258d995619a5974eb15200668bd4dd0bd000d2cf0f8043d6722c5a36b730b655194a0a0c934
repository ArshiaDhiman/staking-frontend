{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Arshia Dhiman\\\\Solidity-Staking-Project\\\\staking-frontend\\\\src\\\\components\\\\staking-pool\\\\stake-menu\\\\deposit\\\\index.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useContract } from \"src/hooks/useContract\";\nimport { STAKING_ADDRESS, TOKEN_ADDRESS, LARGEST_NUM } from \"src/constants\";\nimport StakingABI from \"src/abi/Staking.json\";\nimport TokenABI from \"src/abi/Token.json\"; // import { useRouter } from \"next/dist/client/router\";\n\nimport { parseBalance, numberToWei } from \"src/utils\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { calculateReward } from \"src/utils\";\nimport { Button, Input } from \"@components\";\nexport const Deposit = ({\n  id,\n  stakedAmount,\n  pool\n}) => {\n  const {\n    0: amount,\n    1: setAmount\n  } = useState(\"0\");\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: allowance,\n    1: setAllowance\n  } = useState(\"0\");\n  const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n  const token = useContract(TOKEN_ADDRESS, TokenABI, true);\n  const {\n    account,\n    active\n  } = useWeb3React();\n\n  const stakeTokens = async () => {\n    setLoading(true);\n\n    try {\n      if (allowance === \"0\") {\n        toast.info(\"Awaiting successful transaction\");\n        const tx = await (token === null || token === void 0 ? void 0 : token.approve(STAKING_ADDRESS, LARGEST_NUM));\n        await tx.wait();\n        toast.success(\"Success\");\n      } else {\n        if (staking) {\n          const tx = await staking.stake(numberToWei(amount), id);\n          await tx.wait();\n        }\n      }\n\n      setAmount(\"0\"); // eslint-disable-next-line\n    } catch (err) {\n      var _err$data;\n\n      console.log(err);\n      toast.error(((_err$data = err.data) === null || _err$data === void 0 ? void 0 : _err$data.message) || err.message);\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (token) {\n      token.allowance(account, STAKING_ADDRESS).then(allowance => setAllowance(allowance.toString()));\n    }\n  }, [token]);\n  const amountAfterStake = BigNumber.from(stakedAmount).add(numberToWei(amount));\n  const estimatedReward = calculateReward(amountAfterStake, pool.rewardRate, pool.lockPeriod);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex-1 space-y-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"Amount After Stake\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        className: \"text-white\",\n        children: [parseBalance(amountAfterStake), \" ARSH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"New Estimated Reward\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        className: \"text-white\",\n        children: [parseBalance(estimatedReward), \" ARSH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        label: \"Stake Amount\",\n        id: \"amount\",\n        placeholder: \"Amount\",\n        value: amount,\n        type: \"number\",\n        onChange: e => setAmount(e.target.value || \"0\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: stakeTokens,\n        className: \"w-full\",\n        loading: loading,\n        disabled: !active,\n        children: allowance !== \"0\" ? \"Stake\" : \"Enable\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/src/components/staking-pool/stake-menu/deposit/index.tsx"],"names":["React","useState","useEffect","toast","useWeb3React","useContract","STAKING_ADDRESS","TOKEN_ADDRESS","LARGEST_NUM","StakingABI","TokenABI","parseBalance","numberToWei","BigNumber","calculateReward","Button","Input","Deposit","id","stakedAmount","pool","amount","setAmount","loading","setLoading","allowance","setAllowance","staking","token","account","active","stakeTokens","info","tx","approve","wait","success","stake","err","console","log","error","data","message","then","toString","amountAfterStake","from","add","estimatedReward","rewardRate","lockPeriod","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useContract } from \"src/hooks/useContract\";\nimport { STAKING_ADDRESS, TOKEN_ADDRESS, LARGEST_NUM } from \"src/constants\";\nimport StakingABI from \"src/abi/Staking.json\";\nimport TokenABI from \"src/abi/Token.json\";\n// import { useRouter } from \"next/dist/client/router\";\nimport { parseBalance, numberToWei } from \"src/utils\";\nimport { Pool } from \"src/ts/interfaces\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { calculateReward } from \"src/utils\";\n\nimport { Button, Input } from \"@components\";\n\nexport const Deposit: React.FC<{\n    id: number;\n    stakedAmount: string;\n    reward: string;\n    pool: Pool;\n}> = ({ id, stakedAmount, pool }) => {\n    const [amount, setAmount] = useState(\"0\");\n    const [loading, setLoading] = useState(false);\n    const [allowance, setAllowance] = useState(\"0\");\n    const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n    const token = useContract(TOKEN_ADDRESS, TokenABI, true);\n    const { account, active } = useWeb3React();\n\n    const stakeTokens = async () => {\n        setLoading(true);\n        try {\n            if (allowance === \"0\") {\n                toast.info(\"Awaiting successful transaction\");\n                const tx = await token?.approve(STAKING_ADDRESS, LARGEST_NUM);\n                await tx.wait();\n                toast.success(\"Success\");\n            } else {\n                if (staking) {\n                    const tx = await staking.stake(numberToWei(amount), id);\n                    await tx.wait();\n                }\n            }\n\n            setAmount(\"0\");\n            // eslint-disable-next-line\n        } catch (err: any) {\n            console.log(err);\n            toast.error(err.data?.message || err.message);\n        }\n        setLoading(false);\n    };\n\n    useEffect(() => {\n        if (token) {\n            token\n                .allowance(account, STAKING_ADDRESS)\n                .then((allowance: string) =>\n                    setAllowance(allowance.toString()),\n                );\n        }\n    }, [token]);\n\n    const amountAfterStake = BigNumber.from(stakedAmount).add(\n        numberToWei(amount),\n    );\n\n    const estimatedReward = calculateReward(\n        amountAfterStake,\n        pool.rewardRate,\n        pool.lockPeriod,\n    );\n\n    return (\n        <div className=\"flex-1 space-y-2\">\n            <p className=\"text-base text-gray-300\">\n                Amount After Stake{\" \"}\n                <strong className=\"text-white\">\n                    {parseBalance(amountAfterStake)} ARSH\n                </strong>\n            </p>\n            <p className=\"text-base text-gray-300\">\n                New Estimated Reward{\" \"}\n                <strong className=\"text-white\">\n                    {parseBalance(estimatedReward)} ARSH\n                </strong>\n            </p>\n            <div>\n                <Input\n                    label=\"Stake Amount\"\n                    id=\"amount\"\n                    placeholder=\"Amount\"\n                    value={amount}\n                    type=\"number\"\n                    onChange={(e) => setAmount(e.target.value || \"0\")}\n                />\n                <Button\n                    onClick={stakeTokens}\n                    className=\"w-full\"\n                    loading={loading}\n                    disabled={!active}\n                >\n                    {allowance !== \"0\" ? \"Stake\" : \"Enable\"}\n                </Button>\n            </div>\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}