{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Arshia Dhiman\\\\Solidity-Staking-Project\\\\staking-frontend\\\\src\\\\components\\\\right-stake-menu\\\\index.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { Button } from \"@components\";\nimport { useContract } from \"src/hooks/useContract\";\nimport { STAKING_ADDRESS } from \"src/constants\";\nimport StakingABI from \"src/abi/Staking.json\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { parseBalance } from \"src/utils\";\nimport { useRouter } from \"next/dist/client/router\";\nexport const RightStakeMenu = ({\n  id\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: reward,\n    1: setReward\n  } = useState(\"0\");\n  const {\n    0: stakedAmount,\n    1: setStakedAmount\n  } = useState(\"0\");\n  const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n  const {\n    account\n  } = useWeb3React();\n  const router = useRouter();\n  useEffect(() => {\n    if (staking) {\n      staking.calculateReward(id, account).then(reward => setReward(reward.toString()));\n      staking.getAmountStaked(id, account).then(stakedAmount => setStakedAmount(stakedAmount.toString()));\n    }\n  }, [staking]);\n\n  const redeemTokens = async () => {\n    setLoading(true);\n\n    try {\n      if (staking) {\n        const tx = await (staking === null || staking === void 0 ? void 0 : staking.unstake(id));\n        await tx.wait();\n      }\n\n      router.reload();\n    } catch (err) {\n      console.log(err);\n    }\n\n    setLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"border flex-1 space-y-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"Amount Staked :\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [parseBalance(stakedAmount), \" ARSH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"Rewards Earned : \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [parseBalance(reward), \" ARSH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: redeemTokens,\n      className: \"w-full\",\n      loading: loading,\n      children: \"Redeem\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/src/components/right-stake-menu/index.tsx"],"names":["React","useState","useEffect","Button","useContract","STAKING_ADDRESS","StakingABI","useWeb3React","parseBalance","useRouter","RightStakeMenu","id","loading","setLoading","reward","setReward","stakedAmount","setStakedAmount","staking","account","router","calculateReward","then","toString","getAmountStaked","redeemTokens","tx","unstake","wait","reload","err","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,SAAT,QAA0B,yBAA1B;AAEA,OAAO,MAAMC,cAAwC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAY;AAChE,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBZ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAA,OAACa,MAAD;AAAA,OAASC;AAAT,MAAsBd,QAAQ,CAAC,GAAD,CAApC;AACA,QAAM;AAAA,OAACe,YAAD;AAAA,OAAeC;AAAf,MAAkChB,QAAQ,CAAC,GAAD,CAAhD;AACA,QAAMiB,OAAO,GAAGd,WAAW,CAACC,eAAD,EAAkBC,UAAlB,EAA8B,IAA9B,CAA3B;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAcZ,YAAY,EAAhC;AACA,QAAMa,MAAM,GAAGX,SAAS,EAAxB;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIgB,OAAJ,EAAa;AACTA,MAAAA,OAAO,CACFG,eADL,CACqBV,EADrB,EACyBQ,OADzB,EAEKG,IAFL,CAEWR,MAAD,IAAoBC,SAAS,CAACD,MAAM,CAACS,QAAP,EAAD,CAFvC;AAIAL,MAAAA,OAAO,CACFM,eADL,CACqBb,EADrB,EACyBQ,OADzB,EAEKG,IAFL,CAEWN,YAAD,IACFC,eAAe,CAACD,YAAY,CAACO,QAAb,EAAD,CAHvB;AAKH;AACJ,GAZQ,EAYN,CAACL,OAAD,CAZM,CAAT;;AAcA,QAAMO,YAAY,GAAG,YAAY;AAC7BZ,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACA,UAAIK,OAAJ,EAAa;AACT,cAAMQ,EAAE,GAAG,OAAMR,OAAN,aAAMA,OAAN,uBAAMA,OAAO,CAAES,OAAT,CAAiBhB,EAAjB,CAAN,CAAX;AACA,cAAMe,EAAE,CAACE,IAAH,EAAN;AACH;;AACDR,MAAAA,MAAM,CAACS,MAAP;AACH,KAND,CAME,OAAOC,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;;AACDjB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAZD;;AAaA,sBACI;AAAK,IAAA,SAAS,EAAC,yBAAf;AAAA,4BACI;AAAG,MAAA,SAAS,EAAC,yBAAb;AAAA,oCACoB,GADpB,eAEI;AAAA,mBAASL,YAAY,CAACQ,YAAD,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAMI;AAAG,MAAA,SAAS,EAAC,yBAAb;AAAA,mDACqB;AAAA,mBAASR,YAAY,CAACM,MAAD,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA,cADrB;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,eAUI,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEW,YAAjB;AAA+B,MAAA,SAAS,EAAC,QAAzC;AAAkD,MAAA,OAAO,EAAEb,OAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CAnDM","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Button } from \"@components\";\nimport { useContract } from \"src/hooks/useContract\";\nimport { STAKING_ADDRESS } from \"src/constants\";\nimport StakingABI from \"src/abi/Staking.json\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { parseBalance } from \"src/utils\";\nimport { useRouter } from \"next/dist/client/router\";\n\nexport const RightStakeMenu: React.FC<{ id: number }> = ({ id }) => {\n    const [loading, setLoading] = useState(false);\n    const [reward, setReward] = useState(\"0\");\n    const [stakedAmount, setStakedAmount] = useState(\"0\");\n    const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n    const { account } = useWeb3React();\n    const router = useRouter();\n\n    useEffect(() => {\n        if (staking) {\n            staking\n                .calculateReward(id, account)\n                .then((reward: string) => setReward(reward.toString()));\n\n            staking\n                .getAmountStaked(id, account)\n                .then((stakedAmount: string) =>\n                    setStakedAmount(stakedAmount.toString()),\n                );\n        }\n    }, [staking]);\n\n    const redeemTokens = async () => {\n        setLoading(true);\n        try {\n            if (staking) {\n                const tx = await staking?.unstake(id);\n                await tx.wait();\n            }\n            router.reload();\n        } catch (err) {\n            console.log(err);\n        }\n        setLoading(false);\n    };\n    return (\n        <div className=\"border flex-1 space-y-2\">\n            <p className=\"text-base text-gray-300\">\n                Amount Staked :{\" \"}\n                <strong>{parseBalance(stakedAmount)} ARSH</strong>\n            </p>\n\n            <p className=\"text-base text-gray-300\">\n                Rewards Earned : <strong>{parseBalance(reward)} ARSH</strong>\n            </p>\n\n            <Button onClick={redeemTokens} className=\"w-full\" loading={loading}>\n                Redeem\n            </Button>\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}