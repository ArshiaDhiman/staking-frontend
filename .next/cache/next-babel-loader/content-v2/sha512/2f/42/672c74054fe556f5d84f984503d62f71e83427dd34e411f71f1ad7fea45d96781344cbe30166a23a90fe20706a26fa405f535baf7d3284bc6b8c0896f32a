{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { STAKING_ADDRESS } from \"src/constants\";\nimport ABI from \"src/abi/Staking.json\";\nimport { getContract } from \"src/utils\"; // Define a type for the slice state\n\n// Define the initial state using that type\nconst initialState = {\n  pools: []\n};\nexport const stakingSlice = createSlice({\n  name: \"staking\",\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    setPools: (state, action) => {\n      state.pools = action.payload;\n    }\n  }\n}); // whatever function the thunk returns should use .then (can't await)\n\nexport const updatePools = account => {\n  return dispatch => {\n    const staking = getContract(STAKING_ADDRESS, ABI); // eslint-disable-next-line\n\n    staking.getPools().then(async _pools => {\n      const pools = await Promise.all(_pools.map(async ({\n        poolName,\n        rewardRate,\n        lockPeriod,\n        totalStaked\n      }, id) => {\n        let user_info = [\"0,0,0\"];\n\n        if (account) {\n          user_info = await staking.getStakeholderInfo(id, account);\n          console.log(user_info);\n        }\n\n        return {\n          name: poolName,\n          rewardRate: rewardRate.toString(),\n          lockPeriod: lockPeriod.toString(),\n          totalStaked: totalStaked.toString(),\n          id: id,\n          user_deposit_time: user_info[0].toString(),\n          user_stake: user_info[1].toString(),\n          user_reward: user_info[2].toString()\n        };\n      }));\n      dispatch(setPools(pools));\n    });\n  };\n}; // setPools is an action\n\nexport const {\n  setPools\n} = stakingSlice.actions;\nexport default stakingSlice.reducer; // BigNumber.from(string)\n// two slashes for floor division\n// rpc url chain id","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/src/features/staking/stakingSlice.ts"],"names":["createSlice","STAKING_ADDRESS","ABI","getContract","initialState","pools","stakingSlice","name","reducers","setPools","state","action","payload","updatePools","account","dispatch","staking","getPools","then","_pools","Promise","all","map","poolName","rewardRate","lockPeriod","totalStaked","id","user_info","getStakeholderInfo","console","log","toString","user_deposit_time","user_stake","user_reward","actions","reducer"],"mappings":"AAAA,SACIA,WADJ,QAKO,kBALP;AASA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,SAASC,WAAT,QAA4B,WAA5B,C,CAEA;;AAKA;AACA,MAAMC,YAA0B,GAAG;AAC/BC,EAAAA,KAAK,EAAE;AADwB,CAAnC;AAIA,OAAO,MAAMC,YAAY,GAAGN,WAAW,CAAC;AACpCO,EAAAA,IAAI,EAAE,SAD8B;AAEpC;AACAH,EAAAA,YAHoC;AAIpCI,EAAAA,QAAQ,EAAE;AACNC,IAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAA0C;AAChDD,MAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACC,OAArB;AACH;AAHK;AAJ0B,CAAD,CAAhC,C,CAWP;;AACA,OAAO,MAAMC,WAAW,GAAIC,OAAD,IAAsB;AAC7C,SAAQC,QAAD,IAA4D;AAC/D,UAAMC,OAAO,GAAGb,WAAW,CAACF,eAAD,EAAkBC,GAAlB,CAA3B,CAD+D,CAE/D;;AACAc,IAAAA,OAAO,CAACC,QAAR,GAAmBC,IAAnB,CAAwB,MAAOC,MAAP,IAAyB;AAC7C,YAAMd,KAAK,GAAG,MAAMe,OAAO,CAACC,GAAR,CAChBF,MAAM,CAACG,GAAP,CACI,OACI;AAAEC,QAAAA,QAAF;AAAYC,QAAAA,UAAZ;AAAwBC,QAAAA,UAAxB;AAAoCC,QAAAA;AAApC,OADJ,EAEIC,EAFJ,KAGK;AACD,YAAIC,SAAS,GAAG,CAAC,OAAD,CAAhB;;AAEA,YAAId,OAAJ,EAAa;AACTc,UAAAA,SAAS,GAAG,MAAMZ,OAAO,CAACa,kBAAR,CACdF,EADc,EAEdb,OAFc,CAAlB;AAIAgB,UAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AACH;;AAED,eAAO;AACHrB,UAAAA,IAAI,EAAEgB,QADH;AAEHC,UAAAA,UAAU,EAAEA,UAAU,CAACQ,QAAX,EAFT;AAGHP,UAAAA,UAAU,EAAEA,UAAU,CAACO,QAAX,EAHT;AAIHN,UAAAA,WAAW,EAAEA,WAAW,CAACM,QAAZ,EAJV;AAKHL,UAAAA,EAAE,EAAEA,EALD;AAMHM,UAAAA,iBAAiB,EAAEL,SAAS,CAAC,CAAD,CAAT,CAAaI,QAAb,EANhB;AAOHE,UAAAA,UAAU,EAAEN,SAAS,CAAC,CAAD,CAAT,CAAaI,QAAb,EAPT;AAQHG,UAAAA,WAAW,EAAEP,SAAS,CAAC,CAAD,CAAT,CAAaI,QAAb;AARV,SAAP;AAUH,OAzBL,CADgB,CAApB;AA8BAjB,MAAAA,QAAQ,CAACN,QAAQ,CAACJ,KAAD,CAAT,CAAR;AACH,KAhCD;AAiCH,GApCD;AAqCH,CAtCM,C,CAwCP;;AACA,OAAO,MAAM;AAAEI,EAAAA;AAAF,IAAeH,YAAY,CAAC8B,OAAlC;AAEP,eAAe9B,YAAY,CAAC+B,OAA5B,C,CAEA;AACA;AACA","sourcesContent":["import {\n    createSlice,\n    PayloadAction,\n    ThunkDispatch,\n    Action,\n} from \"@reduxjs/toolkit\";\nimport { RootState } from \"@src/store\";\nimport { Pool } from \"@ts/interfaces\";\n\nimport { STAKING_ADDRESS } from \"src/constants\";\nimport ABI from \"src/abi/Staking.json\";\nimport { getContract } from \"src/utils\";\n\n// Define a type for the slice state\ninterface StakingState {\n    pools: Pool[];\n}\n\n// Define the initial state using that type\nconst initialState: StakingState = {\n    pools: [],\n};\n\nexport const stakingSlice = createSlice({\n    name: \"staking\",\n    // `createSlice` will infer the state type from the `initialState` argument\n    initialState,\n    reducers: {\n        setPools: (state, action: PayloadAction<Pool[]>) => {\n            state.pools = action.payload;\n        },\n    },\n});\n\n// whatever function the thunk returns should use .then (can't await)\nexport const updatePools = (account?: string) => {\n    return (dispatch: ThunkDispatch<RootState, void, Action>): void => {\n        const staking = getContract(STAKING_ADDRESS, ABI);\n        // eslint-disable-next-line\n        staking.getPools().then(async (_pools: any[]) => {\n            const pools = await Promise.all(\n                _pools.map(\n                    async (\n                        { poolName, rewardRate, lockPeriod, totalStaked },\n                        id,\n                    ) => {\n                        let user_info = [\"0,0,0\"];\n\n                        if (account) {\n                            user_info = await staking.getStakeholderInfo(\n                                id,\n                                account,\n                            );\n                            console.log(user_info);\n                        }\n\n                        return {\n                            name: poolName,\n                            rewardRate: rewardRate.toString(),\n                            lockPeriod: lockPeriod.toString(),\n                            totalStaked: totalStaked.toString(),\n                            id: id,\n                            user_deposit_time: user_info[0].toString(),\n                            user_stake: user_info[1].toString(),\n                            user_reward: user_info[2].toString(),\n                        };\n                    },\n                ),\n            );\n\n            dispatch(setPools(pools));\n        });\n    };\n};\n\n// setPools is an action\nexport const { setPools } = stakingSlice.actions;\n\nexport default stakingSlice.reducer;\n\n// BigNumber.from(string)\n// two slashes for floor division\n// rpc url chain id\n"]},"metadata":{},"sourceType":"module"}