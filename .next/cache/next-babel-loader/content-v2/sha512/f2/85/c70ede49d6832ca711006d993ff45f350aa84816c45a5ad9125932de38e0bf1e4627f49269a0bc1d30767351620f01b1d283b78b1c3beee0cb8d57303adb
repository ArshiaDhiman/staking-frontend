{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injected } from \"src/connectors\";\nexport function useEagerConnect() {\n  _s();\n\n  var _useWeb3React = useWeb3React(),\n      activate = _useWeb3React.activate,\n      active = _useWeb3React.active;\n\n  var _useState = useState(false),\n      tried = _useState[0],\n      setTried = _useState[1];\n\n  useEffect(function () {\n    injected.isAuthorized().then(function (isAuthorized) {\n      if (isAuthorized) {\n        activate(injected, undefined, true)[\"catch\"](function () {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, [activate]); // if the connection worked, wait until we get confirmation of that to flip the flag\n\n  useEffect(function () {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n  return tried;\n}\n\n_s(useEagerConnect, \"GLh+9ege4oFDiozdAF2n3i5tC+o=\", false, function () {\n  return [useWeb3React];\n});","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/src/hooks/useEagerConnect.tsx"],"names":["useEffect","useState","useWeb3React","injected","useEagerConnect","activate","active","tried","setTried","isAuthorized","then","undefined"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AAEA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,OAAO,SAASC,eAAT,GAAoC;AAAA;;AAAA,sBACVF,YAAY,EADF;AAAA,MAC/BG,QAD+B,iBAC/BA,QAD+B;AAAA,MACrBC,MADqB,iBACrBA,MADqB;;AAAA,kBAGbL,QAAQ,CAAC,KAAD,CAHK;AAAA,MAGhCM,KAHgC;AAAA,MAGzBC,QAHyB;;AAKvCR,EAAAA,SAAS,CAAC,YAAM;AACZG,IAAAA,QAAQ,CAACM,YAAT,GAAwBC,IAAxB,CAA6B,UAACD,YAAD,EAAkB;AAC3C,UAAIA,YAAJ,EAAkB;AACdJ,QAAAA,QAAQ,CAACF,QAAD,EAAWQ,SAAX,EAAsB,IAAtB,CAAR,UAA0C,YAAM;AAC5CH,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,SAFD;AAGH,OAJD,MAIO;AACHA,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ,KARD;AASH,GAVQ,EAUN,CAACH,QAAD,CAVM,CAAT,CALuC,CAiBvC;;AACAL,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAI,CAACO,KAAD,IAAUD,MAAd,EAAsB;AAClBE,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ,GAJQ,EAIN,CAACD,KAAD,EAAQD,MAAR,CAJM,CAAT;AAMA,SAAOC,KAAP;AACH;;GAzBeH,e;UACiBF,Y","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nimport { injected } from \"src/connectors\";\n\nexport function useEagerConnect(): boolean {\n    const { activate, active } = useWeb3React();\n\n    const [tried, setTried] = useState(false);\n\n    useEffect(() => {\n        injected.isAuthorized().then((isAuthorized) => {\n            if (isAuthorized) {\n                activate(injected, undefined, true).catch(() => {\n                    setTried(true);\n                });\n            } else {\n                setTried(true);\n            }\n        });\n    }, [activate]);\n\n    // if the connection worked, wait until we get confirmation of that to flip the flag\n    useEffect(() => {\n        if (!tried && active) {\n            setTried(true);\n        }\n    }, [tried, active]);\n\n    return tried;\n}\n"]},"metadata":{},"sourceType":"module"}