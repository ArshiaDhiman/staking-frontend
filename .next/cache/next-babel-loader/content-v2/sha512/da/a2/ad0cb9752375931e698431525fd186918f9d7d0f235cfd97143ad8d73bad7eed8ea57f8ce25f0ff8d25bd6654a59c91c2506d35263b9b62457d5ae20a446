{"ast":null,"code":"import { Contract } from \"@ethersproject/contracts\";\nimport { InfuraProvider } from \"@ethersproject/providers\";\nconst library = new InfuraProvider(\"rinkeby\");\nexport function shortenHex(hex, length = 4) {\n  return `${hex.substring(0, length + 2)}…${hex.substring(hex.length - length)}`;\n}\nexport function getContract(address, ABI) {\n  return new Contract(address, ABI, library);\n}\nexport function secondsToWeeks(_seconds) {\n  const seconds = parseInt(_seconds);\n  const months = seconds / 604800;\n  return months;\n}\nexport function weiToEther(_amount) {\n  const wei = parseInt(_amount);\n  const ether = wei / 1000000000000000000;\n  ether.toString();\n  return ether;\n}","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/src/utils.ts"],"names":["Contract","InfuraProvider","library","shortenHex","hex","length","substring","getContract","address","ABI","secondsToWeeks","_seconds","seconds","parseInt","months","weiToEther","_amount","wei","ether","toString"],"mappings":"AAAA,SAASA,QAAT,QAA4C,0BAA5C;AACA,SAASC,cAAT,QAA+B,0BAA/B;AAEA,MAAMC,OAAO,GAAG,IAAID,cAAJ,CAAmB,SAAnB,CAAhB;AAEA,OAAO,SAASE,UAAT,CAAoBC,GAApB,EAAiCC,MAAM,GAAG,CAA1C,EAAqD;AACxD,SAAQ,GAAED,GAAG,CAACE,SAAJ,CAAc,CAAd,EAAiBD,MAAM,GAAG,CAA1B,CAA6B,IAAGD,GAAG,CAACE,SAAJ,CACtCF,GAAG,CAACC,MAAJ,GAAaA,MADyB,CAExC,EAFF;AAGH;AAED,OAAO,SAASE,WAAT,CAAqBC,OAArB,EAAsCC,GAAtC,EAAwE;AAC3E,SAAO,IAAIT,QAAJ,CAAaQ,OAAb,EAAsBC,GAAtB,EAA2BP,OAA3B,CAAP;AACH;AAED,OAAO,SAASQ,cAAT,CAAwBC,QAAxB,EAAkD;AACrD,QAAMC,OAAO,GAAGC,QAAQ,CAACF,QAAD,CAAxB;AACA,QAAMG,MAAM,GAAGF,OAAO,GAAG,MAAzB;AACA,SAAOE,MAAP;AACH;AAED,OAAO,SAASC,UAAT,CAAoBC,OAApB,EAA6C;AAChD,QAAMC,GAAG,GAAGJ,QAAQ,CAACG,OAAD,CAApB;AACA,QAAME,KAAK,GAAGD,GAAG,GAAG,mBAApB;AACAC,EAAAA,KAAK,CAACC,QAAN;AACA,SAAOD,KAAP;AACH","sourcesContent":["import { Contract, ContractInterface } from \"@ethersproject/contracts\";\nimport { InfuraProvider } from \"@ethersproject/providers\";\n\nconst library = new InfuraProvider(\"rinkeby\");\n\nexport function shortenHex(hex: string, length = 4): string {\n    return `${hex.substring(0, length + 2)}…${hex.substring(\n        hex.length - length,\n    )}`;\n}\n\nexport function getContract(address: string, ABI: ContractInterface): Contract {\n    return new Contract(address, ABI, library);\n}\n\nexport function secondsToWeeks(_seconds: string): number {\n    const seconds = parseInt(_seconds);\n    const months = seconds / 604800;\n    return months;\n}\n\nexport function weiToEther(_amount: string): number {\n    const wei = parseInt(_amount);\n    const ether = wei / 1000000000000000000;\n    ether.toString();\n    return ether;\n}\n"]},"metadata":{},"sourceType":"module"}