{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Arshia Dhiman\\\\Solidity-Staking-Project\\\\staking-frontend\\\\src\\\\components\\\\staking-pool\\\\stake-menu\\\\deposit\\\\index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useContract } from \"src/hooks/useContract\";\nimport { STAKING_ADDRESS, TOKEN_ADDRESS, LARGEST_NUM, knownErrors } from \"src/constants\";\nimport StakingABI from \"src/abi/Staking.json\";\nimport TokenABI from \"src/abi/Token.json\";\nimport { parseBalance, numberToWei } from \"src/utils\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { calculateReward } from \"src/utils\";\nimport { Button, Input } from \"@components\";\nimport { useAppDispatch } from \"@src/hooks\";\nimport { updatePools } from \"@src/features/staking/stakingSlice\";\nexport var Deposit = function Deposit(_ref) {\n  _s();\n\n  var pool = _ref.pool;\n\n  var _useState = useState(\"0\"),\n      amount = _useState[0],\n      setAmount = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(\"0\"),\n      allowance = _useState3[0],\n      setAllowance = _useState3[1];\n\n  var _useState4 = useState(false),\n      enable = _useState4[0],\n      setEnable = _useState4[1];\n\n  var staking = useContract(STAKING_ADDRESS, StakingABI, true);\n  var token = useContract(TOKEN_ADDRESS, TokenABI, true);\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      active = _useWeb3React.active;\n\n  var dispatch = useAppDispatch();\n\n  var stakeTokens = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var tx, _tx, message;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.prev = 1;\n\n              if (!(allowance === \"0\")) {\n                _context.next = 13;\n                break;\n              }\n\n              toast.info(\"Awaiting successful transaction\");\n              _context.next = 6;\n              return token === null || token === void 0 ? void 0 : token.approve(STAKING_ADDRESS, LARGEST_NUM);\n\n            case 6:\n              tx = _context.sent;\n              _context.next = 9;\n              return tx.wait();\n\n            case 9:\n              toast.success(\"Success\");\n              dispatch(updatePools(account || \"\"));\n              _context.next = 22;\n              break;\n\n            case 13:\n              if (!staking) {\n                _context.next = 22;\n                break;\n              }\n\n              toast.info(\"Awaiting successful transaction\");\n              _context.next = 17;\n              return staking.stake(numberToWei(amount), pool.id);\n\n            case 17:\n              _tx = _context.sent;\n              _context.next = 20;\n              return _tx.wait();\n\n            case 20:\n              toast.success(\"Success\");\n              dispatch(updatePools(account || \"\"));\n\n            case 22:\n              setAmount(\"0\"); // eslint-disable-next-line\n\n              _context.next = 30;\n              break;\n\n            case 25:\n              _context.prev = 25;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0.message);\n              message = knownErrors[_context.t0.message] || _context.t0.message;\n              toast.error(message);\n\n            case 30:\n              setLoading(false);\n\n            case 31:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 25]]);\n    }));\n\n    return function stakeTokens() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    if (token) {\n      token.allowance(account, STAKING_ADDRESS).then(function (allowance) {\n        return setAllowance(allowance.toString());\n      });\n    }\n  }, [token]);\n  var amountAfterStake = BigNumber.from(pool.user_stake).add(numberToWei(amount));\n  var estimatedReward = calculateReward(amountAfterStake, pool.rewardRate, pool.lockPeriod);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex-1 space-y-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"Amount After Stake\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        className: \"text-white\",\n        children: [parseBalance(amountAfterStake), \" ARSH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"New Estimated Reward\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        className: \"text-white\",\n        children: [parseBalance(estimatedReward), \" ARSH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        label: \"Stake Amount\",\n        id: \"amount\",\n        placeholder: \"Amount\",\n        value: amount,\n        type: \"number\",\n        onChange: function onChange(e) {\n          return setAmount(e.target.value || \"0\");\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: stakeTokens,\n        className: \"w-full\",\n        loading: loading,\n        disabled: !active,\n        children: allowance !== \"0\" ? \"Stake\" : \"Enable\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(Deposit, \"Hj8QQ6P8TGu1Mc3i4ZfCtrkVWcU=\", false, function () {\n  return [useContract, useContract, useWeb3React, useAppDispatch];\n});\n\n_c = Deposit;\n\nvar _c;\n\n$RefreshReg$(_c, \"Deposit\");","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/src/components/staking-pool/stake-menu/deposit/index.tsx"],"names":["React","useState","useEffect","toast","useWeb3React","useContract","STAKING_ADDRESS","TOKEN_ADDRESS","LARGEST_NUM","knownErrors","StakingABI","TokenABI","parseBalance","numberToWei","BigNumber","calculateReward","Button","Input","useAppDispatch","updatePools","Deposit","pool","amount","setAmount","loading","setLoading","allowance","setAllowance","enable","setEnable","staking","token","account","active","dispatch","stakeTokens","info","approve","tx","wait","success","stake","id","console","log","message","error","then","toString","amountAfterStake","from","user_stake","add","estimatedReward","rewardRate","lockPeriod","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useContract } from \"src/hooks/useContract\";\nimport {\n    STAKING_ADDRESS,\n    TOKEN_ADDRESS,\n    LARGEST_NUM,\n    knownErrors,\n} from \"src/constants\";\nimport StakingABI from \"src/abi/Staking.json\";\nimport TokenABI from \"src/abi/Token.json\";\nimport { parseBalance, numberToWei } from \"src/utils\";\nimport { Pool } from \"src/ts/interfaces\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { calculateReward } from \"src/utils\";\n\nimport { Button, Input } from \"@components\";\nimport { useAppDispatch } from \"@src/hooks\";\nimport { updatePools } from \"@src/features/staking/stakingSlice\";\n\nexport const Deposit: React.FC<{\n    pool: Pool;\n}> = ({ pool }) => {\n    const [amount, setAmount] = useState(\"0\");\n    const [loading, setLoading] = useState(false);\n    const [allowance, setAllowance] = useState(\"0\");\n    const [enable, setEnable] = useState(false);\n    const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n    const token = useContract(TOKEN_ADDRESS, TokenABI, true);\n    const { account, active } = useWeb3React();\n    const dispatch = useAppDispatch();\n\n    const stakeTokens = async () => {\n        setLoading(true);\n        try {\n            if (allowance === \"0\") {\n                toast.info(\"Awaiting successful transaction\");\n                const tx = await token?.approve(STAKING_ADDRESS, LARGEST_NUM);\n                await tx.wait();\n                toast.success(\"Success\");\n                dispatch(updatePools(account || \"\"));\n            } else {\n                if (staking) {\n                    toast.info(\"Awaiting successful transaction\");\n                    const tx = await staking.stake(\n                        numberToWei(amount),\n                        pool.id,\n                    );\n                    await tx.wait();\n                    toast.success(\"Success\");\n                    dispatch(updatePools(account || \"\"));\n                }\n            }\n\n            setAmount(\"0\");\n            // eslint-disable-next-line\n        } catch (err: any) {\n            console.log(err.message);\n\n            const message = knownErrors[err.message] || err.message;\n            toast.error(message);\n        }\n        setLoading(false);\n    };\n\n    useEffect(() => {\n        if (token) {\n            token\n                .allowance(account, STAKING_ADDRESS)\n                .then((allowance: string) =>\n                    setAllowance(allowance.toString()),\n                );\n        }\n    }, [token]);\n\n    const amountAfterStake = BigNumber.from(pool.user_stake).add(\n        numberToWei(amount),\n    );\n\n    const estimatedReward = calculateReward(\n        amountAfterStake,\n        pool.rewardRate,\n        pool.lockPeriod,\n    );\n\n    return (\n        <div className=\"flex-1 space-y-2\">\n            <p className=\"text-base text-gray-300\">\n                Amount After Stake{\" \"}\n                <strong className=\"text-white\">\n                    {parseBalance(amountAfterStake)} ARSH\n                </strong>\n            </p>\n            <p className=\"text-base text-gray-300\">\n                New Estimated Reward{\" \"}\n                <strong className=\"text-white\">\n                    {parseBalance(estimatedReward)} ARSH\n                </strong>\n            </p>\n            <div>\n                <Input\n                    label=\"Stake Amount\"\n                    id=\"amount\"\n                    placeholder=\"Amount\"\n                    value={amount}\n                    type=\"number\"\n                    onChange={(e) => setAmount(e.target.value || \"0\")}\n                />\n                <Button\n                    onClick={stakeTokens}\n                    className=\"w-full\"\n                    loading={loading}\n                    disabled={!active}\n                >\n                    {allowance !== \"0\" ? \"Stake\" : \"Enable\"}\n                </Button>\n            </div>\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}