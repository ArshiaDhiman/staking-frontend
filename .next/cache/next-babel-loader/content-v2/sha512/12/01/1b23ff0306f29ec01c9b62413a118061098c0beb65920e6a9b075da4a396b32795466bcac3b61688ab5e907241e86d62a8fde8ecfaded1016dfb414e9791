{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Arshia Dhiman\\\\Solidity-Staking-Project\\\\staking-frontend\\\\pages\\\\index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Main } from \"@components\";\nimport { useAppDispatch } from \"@hooks\";\nimport { setPools, updatePools } from \"@src/features/staking/stakingSlice\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nvar Home = function Home(_ref) {\n  _s();\n\n  var pools = _ref.pools;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account;\n\n  var _useState = useState(false),\n      tried = _useState[0],\n      setTried = _useState[1];\n\n  var dispatch = useAppDispatch();\n  useEffect(function () {\n    if (pools.length > 0 && !tried) {\n      dispatch(setPools(pools));\n      setTried(true);\n    }\n\n    if (account) {\n      dispatch(updatePools(account));\n    }\n  }, [tried, pools, account]);\n  return /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 12\n  }, _this);\n};\n\n_s(Home, \"YJMcTqwIW30hbS5gI9Fw3lFSp1Y=\", false, function () {\n  return [useWeb3React, useAppDispatch];\n});\n\n_c = Home;\nexport var __N_SSP = true;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/pages/index.tsx"],"names":["React","useEffect","useState","Main","useAppDispatch","setPools","updatePools","useWeb3React","Home","pools","account","tried","setTried","dispatch","length"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAIA,SAASC,IAAT,QAAqB,aAArB;AAIA,SAASC,cAAT,QAA+B,QAA/B;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,oCAAtC;AACA,SAASC,YAAT,QAA6B,kBAA7B;;AAEA,IAAMC,IAAiC,GAAG,SAApCA,IAAoC,OAAe;AAAA;;AAAA,MAAZC,KAAY,QAAZA,KAAY;;AAAA,sBACjCF,YAAY,EADqB;AAAA,MAC7CG,OAD6C,iBAC7CA,OAD6C;;AAAA,kBAE3BR,QAAQ,CAAC,KAAD,CAFmB;AAAA,MAE9CS,KAF8C;AAAA,MAEvCC,QAFuC;;AAGrD,MAAMC,QAAQ,GAAGT,cAAc,EAA/B;AAEAH,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIQ,KAAK,CAACK,MAAN,GAAe,CAAf,IAAoB,CAACH,KAAzB,EAAgC;AAC5BE,MAAAA,QAAQ,CAACR,QAAQ,CAACI,KAAD,CAAT,CAAR;AACAG,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;;AACD,QAAIF,OAAJ,EAAa;AACTG,MAAAA,QAAQ,CAACP,WAAW,CAACI,OAAD,CAAZ,CAAR;AACH;AACJ,GARQ,EAQN,CAACC,KAAD,EAAQF,KAAR,EAAeC,OAAf,CARM,CAAT;AAUA,sBAAO,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,WAAP;AACH,CAhBD;;GAAMF,I;UACkBD,Y,EAEHH,c;;;KAHfI,I;;AAkBN,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { GetServerSideProps } from \"next\";\n\nimport { Pool } from \"@ts/interfaces\";\nimport { Main } from \"@components\";\nimport { STAKING_ADDRESS } from \"src/constants\";\nimport ABI from \"@abi/Staking.json\";\nimport { getContract } from \"src/utils\";\nimport { useAppDispatch } from \"@hooks\";\nimport { setPools, updatePools } from \"@src/features/staking/stakingSlice\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nconst Home: React.FC<{ pools: Pool[] }> = ({ pools }) => {\n    const { account } = useWeb3React();\n    const [tried, setTried] = useState(false);\n    const dispatch = useAppDispatch();\n\n    useEffect(() => {\n        if (pools.length > 0 && !tried) {\n            dispatch(setPools(pools));\n            setTried(true);\n        }\n        if (account) {\n            dispatch(updatePools(account));\n        }\n    }, [tried, pools, account]);\n\n    return <Main />;\n};\n\nexport default Home;\n\nexport const getServerSideProps: GetServerSideProps = async () => {\n    const staking = getContract(STAKING_ADDRESS, ABI);\n    // eslint-disable-next-line\n    const _pools = (await staking.getPools()) as any[];\n\n    const pools = _pools.map(\n        ({ poolName, rewardRate, lockPeriod, totalStaked }, id) => ({\n            name: poolName,\n            rewardRate: rewardRate.toString(),\n            lockPeriod: lockPeriod.toString(),\n            totalStaked: totalStaked.toString(),\n            id: id,\n            user_deposit_time: \"0\",\n            user_stake: \"0\",\n            user_reward: \"0\",\n        }),\n    );\n\n    return {\n        props: { pools }, // will be passed to the page component as\n    };\n};\n"]},"metadata":{},"sourceType":"module"}