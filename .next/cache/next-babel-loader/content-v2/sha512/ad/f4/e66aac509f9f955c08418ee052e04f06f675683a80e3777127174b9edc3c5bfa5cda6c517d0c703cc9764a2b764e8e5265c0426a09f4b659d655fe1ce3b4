{"ast":null,"code":"var _reactJsxDevRuntime = require(\"react/jsx-dev-runtime\");\n\nvar _jsxFileName = \"C:\\\\Users\\\\Arshia Dhiman\\\\Solidity-Staking-Project\\\\staking-frontend\\\\src\\\\components\\\\left-stake-menu\\\\index.tsx\";\n\nconst LeftStakeMenu = ({\n  balance,\n  id\n}) => {\n  const [amount, setAmount] = useState(\"0\");\n  const [loading, setLoading] = useState(false);\n  const [allowance, setAllowance] = useState(\"0\");\n  const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n  const token = useContract(TOKEN_ADDRESS, TokenABI, true);\n  const {\n    active,\n    account\n  } = useWeb3React();\n  const router = useRouter();\n\n  const stakeTokens = async () => {\n    setLoading(true);\n\n    try {\n      if (allowance === \"0\") {\n        const tx = await (token === null || token === void 0 ? void 0 : token.approve(STAKING_ADDRESS, LARGEST_NUM));\n        await tx.wait();\n      } else {\n        if (staking) {\n          const tx = await staking.stake(numberToWei(amount), id);\n          await tx.wait();\n        }\n      }\n\n      router.push(router.asPath);\n      setAmount(\"\");\n    } catch (err) {\n      console.log(err);\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (token) {\n      token.allowance(account, STAKING_ADDRESS).then(allowance => setAllowance(allowance.toString()));\n    }\n  }, [token]);\n  return /*#__PURE__*/_reactJsxDevRuntime.jsxDEV(\"div\", {\n    className: \"flex-1 border space-y-2\",\n    children: [/*#__PURE__*/_reactJsxDevRuntime.jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"Amount After Stake : \", /*#__PURE__*/_reactJsxDevRuntime.jsxDEV(\"strong\", {\n        children: \"amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 38\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_reactJsxDevRuntime.jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"New Estimated Reward : \", /*#__PURE__*/_reactJsxDevRuntime.jsxDEV(\"strong\", {\n        children: \"amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 40\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_reactJsxDevRuntime.jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_reactJsxDevRuntime.jsxDEV(Input, {\n        label: \"Stake Amount\",\n        id: \"amount\",\n        placeholder: \"Amount\",\n        value: amount,\n        type: \"number\",\n        onChange: e => setAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_reactJsxDevRuntime.jsxDEV(Button, {\n        onClick: stakeTokens,\n        className: \"w-full\",\n        loading: loading,\n        children: allowance !== \"0\" ? \"Stake\" : \"Enable\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/src/components/left-stake-menu/index.tsx"],"names":["LeftStakeMenu","balance","id","amount","setAmount","useState","loading","setLoading","allowance","setAllowance","staking","useContract","STAKING_ADDRESS","StakingABI","token","TOKEN_ADDRESS","TokenABI","active","account","useWeb3React","router","useRouter","stakeTokens","tx","approve","LARGEST_NUM","wait","stake","numberToWei","push","asPath","err","console","log","useEffect","then","toString","e","target","value"],"mappings":"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","sourcesContent":["const LeftStakeMenu: React.FC<PoolProps> = ({ balance, id }) => {\r\n    const [amount, setAmount] = useState(\"0\");\r\n    const [loading, setLoading] = useState(false);\r\n    const [allowance, setAllowance] = useState(\"0\");\r\n    const staking = useContract(STAKING_ADDRESS, StakingABI, true);\r\n    const token = useContract(TOKEN_ADDRESS, TokenABI, true);\r\n    const { active, account } = useWeb3React();\r\n    const router = useRouter();\r\n\r\n    const stakeTokens = async () => {\r\n        setLoading(true);\r\n        try {\r\n            if (allowance === \"0\") {\r\n                const tx = await token?.approve(STAKING_ADDRESS, LARGEST_NUM);\r\n                await tx.wait();\r\n            } else {\r\n                if (staking) {\r\n                    const tx = await staking.stake(numberToWei(amount), id);\r\n                    await tx.wait();\r\n                }\r\n            }\r\n            router.push(router.asPath);\r\n            setAmount(\"\");\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (token) {\r\n            token\r\n                .allowance(account, STAKING_ADDRESS)\r\n                .then((allowance: string) =>\r\n                    setAllowance(allowance.toString()),\r\n                );\r\n        }\r\n    }, [token]);\r\n\r\n    return (\r\n        <div className=\"flex-1 border space-y-2\">\r\n            <p className=\"text-base text-gray-300\">\r\n                Amount After Stake : <strong>amount</strong>\r\n            </p>\r\n            <p className=\"text-base text-gray-300\">\r\n                New Estimated Reward : <strong>amount</strong>\r\n            </p>\r\n            <div>\r\n                <Input\r\n                    label=\"Stake Amount\"\r\n                    id=\"amount\"\r\n                    placeholder=\"Amount\"\r\n                    value={amount}\r\n                    type=\"number\"\r\n                    onChange={(e) => setAmount(e.target.value)}\r\n                />\r\n                <Button\r\n                    onClick={stakeTokens}\r\n                    className=\"w-full\"\r\n                    loading={loading}\r\n                >\r\n                    {allowance !== \"0\" ? \"Stake\" : \"Enable\"}\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"script"}