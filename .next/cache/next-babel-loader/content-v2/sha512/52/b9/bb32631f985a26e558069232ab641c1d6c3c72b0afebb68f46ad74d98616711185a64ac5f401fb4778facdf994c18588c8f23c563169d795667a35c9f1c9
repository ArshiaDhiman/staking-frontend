{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Arshia Dhiman\\\\Solidity-Staking-Project\\\\staking-frontend\\\\src\\\\components\\\\left-stake-menu\\\\index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Input } from \"@components\";\nimport { useContract } from \"src/hooks/useContract\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { STAKING_ADDRESS, TOKEN_ADDRESS, LARGEST_NUM } from \"src/constants\";\nimport StakingABI from \"src/abi/Staking.json\";\nimport TokenABI from \"src/abi/Token.json\";\nimport { numberToWei } from \"src/utils\";\nimport { useRouter } from \"next/dist/client/router\";\nimport { parseBalance } from \"src/utils\";\nexport var LeftStakeMenu = function LeftStakeMenu(_ref) {\n  _s();\n\n  var id = _ref.id,\n      stakedAmount = _ref.stakedAmount;\n\n  var _useState = useState(\"\"),\n      amount = _useState[0],\n      setAmount = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      newAmount = _useState2[0],\n      setNewAmount = _useState2[1];\n\n  var _useState3 = useState(false),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  var _useState4 = useState(\"0\"),\n      allowance = _useState4[0],\n      setAllowance = _useState4[1];\n\n  var staking = useContract(STAKING_ADDRESS, StakingABI, true);\n  var token = useContract(TOKEN_ADDRESS, TokenABI, true);\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account;\n\n  var router = useRouter();\n  console.log(stakedAmount);\n  console.log(amount);\n\n  var stakeTokens = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var tx, _tx;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.prev = 1;\n\n              if (!(allowance === \"0\")) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 5;\n              return token === null || token === void 0 ? void 0 : token.approve(STAKING_ADDRESS, LARGEST_NUM);\n\n            case 5:\n              tx = _context.sent;\n              _context.next = 8;\n              return tx.wait();\n\n            case 8:\n              _context.next = 16;\n              break;\n\n            case 10:\n              if (!staking) {\n                _context.next = 16;\n                break;\n              }\n\n              _context.next = 13;\n              return staking.stake(numberToWei(amount), id);\n\n            case 13:\n              _tx = _context.sent;\n              _context.next = 16;\n              return _tx.wait();\n\n            case 16:\n              router.reload();\n              setAmount(\"\");\n              _context.next = 23;\n              break;\n\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n            case 23:\n              setLoading(false);\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 20]]);\n    }));\n\n    return function stakeTokens() {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // const newTotal = (_amount: string, oldAmount: string) => {\n  //     if(_amount === 0 ){\n  //     }\n  //     const total = parseInt(_amount) + parseInt(oldAmount);\n  //     const _total = total.toString();\n  //     setNewAmount(_total);\n  //     return total;\n  // };\n  // const newReward = () => {};\n  // useEffect(() => {\n  //     const _amount = newTotal(amount, stakedAmount).toString();\n  //     setNewAmount(_amount);\n  //     console.log(newAmount);\n  // }, [amount]);\n\n\n  useEffect(function () {\n    if (token) {\n      token.allowance(account, STAKING_ADDRESS).then(function (allowance) {\n        return setAllowance(allowance.toString());\n      });\n    }\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex-1 space-y-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"Amount After Stake :\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [parseBalance(newAmount), \" ARSH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"New Estimated Reward : \", /*#__PURE__*/_jsxDEV(\"strong\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 40\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        label: \"Stake Amount\",\n        id: \"amount\",\n        placeholder: \"Amount\",\n        value: amount,\n        type: \"number\",\n        onChange: function onChange(e) {\n          return logInput(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: stakeTokens,\n        className: \"w-full\",\n        loading: loading,\n        children: allowance !== \"0\" ? \"Stake\" : \"Enable\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(LeftStakeMenu, \"vUXTTGgS0tcU2BnABqYo68VJBew=\", false, function () {\n  return [useContract, useContract, useWeb3React, useRouter];\n});\n\n_c = LeftStakeMenu;\n\nvar _c;\n\n$RefreshReg$(_c, \"LeftStakeMenu\");","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/src/components/left-stake-menu/index.tsx"],"names":["React","useState","useEffect","Button","Input","useContract","useWeb3React","STAKING_ADDRESS","TOKEN_ADDRESS","LARGEST_NUM","StakingABI","TokenABI","numberToWei","useRouter","parseBalance","LeftStakeMenu","id","stakedAmount","amount","setAmount","newAmount","setNewAmount","loading","setLoading","allowance","setAllowance","staking","token","account","router","console","log","stakeTokens","approve","tx","wait","stake","reload","then","toString","e","logInput","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Button, Input } from \"@components\";\nimport { useContract } from \"src/hooks/useContract\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { STAKING_ADDRESS, TOKEN_ADDRESS, LARGEST_NUM } from \"src/constants\";\nimport StakingABI from \"src/abi/Staking.json\";\nimport TokenABI from \"src/abi/Token.json\";\nimport { numberToWei } from \"src/utils\";\nimport { useRouter } from \"next/dist/client/router\";\nimport { parseBalance } from \"src/utils\";\n\nexport const LeftStakeMenu: React.FC<{\n    id: number;\n    stakedAmount: string;\n    reward: string;\n}> = ({ id, stakedAmount }) => {\n    const [amount, setAmount] = useState(\"\");\n    const [newAmount, setNewAmount] = useState(\"\");\n    const [loading, setLoading] = useState(false);\n    const [allowance, setAllowance] = useState(\"0\");\n    const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n    const token = useContract(TOKEN_ADDRESS, TokenABI, true);\n    const { account } = useWeb3React();\n    const router = useRouter();\n    console.log(stakedAmount);\n    console.log(amount);\n\n    const stakeTokens = async () => {\n        setLoading(true);\n        try {\n            if (allowance === \"0\") {\n                const tx = await token?.approve(STAKING_ADDRESS, LARGEST_NUM);\n                await tx.wait();\n            } else {\n                if (staking) {\n                    const tx = await staking.stake(numberToWei(amount), id);\n                    await tx.wait();\n                }\n            }\n            router.reload();\n            setAmount(\"\");\n        } catch (err) {\n            console.log(err);\n        }\n        setLoading(false);\n    };\n\n    // const newTotal = (_amount: string, oldAmount: string) => {\n    //     if(_amount === 0 ){\n\n    //     }\n    //     const total = parseInt(_amount) + parseInt(oldAmount);\n    //     const _total = total.toString();\n    //     setNewAmount(_total);\n    //     return total;\n    // };\n\n    // const newReward = () => {};\n\n    // useEffect(() => {\n    //     const _amount = newTotal(amount, stakedAmount).toString();\n    //     setNewAmount(_amount);\n    //     console.log(newAmount);\n    // }, [amount]);\n\n    useEffect(() => {\n        if (token) {\n            token\n                .allowance(account, STAKING_ADDRESS)\n                .then((allowance: string) =>\n                    setAllowance(allowance.toString()),\n                );\n        }\n    }, [token]);\n\n    return (\n        <div className=\"flex-1 space-y-2\">\n            <p className=\"text-base text-gray-300\">\n                Amount After Stake :{\" \"}\n                <strong>{parseBalance(newAmount)} ARSH</strong>\n            </p>\n            <p className=\"text-base text-gray-300\">\n                New Estimated Reward : <strong></strong>\n            </p>\n            <div>\n                <Input\n                    label=\"Stake Amount\"\n                    id=\"amount\"\n                    placeholder=\"Amount\"\n                    value={amount}\n                    type=\"number\"\n                    onChange={(e) => logInput(e.target.value)}\n                />\n                <Button\n                    onClick={stakeTokens}\n                    className=\"w-full\"\n                    loading={loading}\n                >\n                    {allowance !== \"0\" ? \"Stake\" : \"Enable\"}\n                </Button>\n            </div>\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}