{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Arshia Dhiman\\\\Solidity-Staking-Project\\\\staking-frontend\\\\src\\\\components\\\\staking-pool\\\\stake-menu\\\\withdraw\\\\index.tsx\";\nimport React, { useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport StakingABI from \"@abi/Staking.json\";\nimport { Button } from \"@components\";\nimport { useContract } from \"@hooks/useContract\";\nimport { STAKING_ADDRESS, knownErrors } from \"@src/constants\";\nimport { parseBalance } from \"@src/utils\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useDispatch } from \"react-redux\";\nimport { updatePools } from \"@src/features/staking/stakingSlice\";\nexport const Withdraw = ({\n  pool\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n  const {\n    active\n  } = useWeb3React();\n  const dispatch = useDispatch();\n\n  const redeemTokens = async () => {\n    setLoading(true);\n\n    try {\n      if (staking) {\n        toast.info(\"Awaiting successful transaction\");\n        const tx = await (staking === null || staking === void 0 ? void 0 : staking.unstake(pool.id));\n        await tx.wait();\n        toast.success(\"Success\");\n        dispatch(updatePools(account || \"\"));\n      } // eslint-disable-next-line\n\n    } catch (err) {\n      console.log(err.message);\n      const message = knownErrors[err.message] || err.message;\n      toast.error(message);\n    }\n\n    setLoading(false);\n  };\n\n  console.log(pool);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex-1 space-y-2 relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"Amount Staked\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        className: \"text-white\",\n        children: [parseBalance(pool.user_stake), \" ARSH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"Rewards Earned\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        className: \"text-white\",\n        children: [parseBalance(pool.user_reward), \" ARSH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: redeemTokens,\n      className: \"w-full absolute inset-x-0 bottom-0\",\n      loading: loading,\n      disabled: !active,\n      children: \"Redeem\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/src/components/staking-pool/stake-menu/withdraw/index.tsx"],"names":["React","useState","toast","StakingABI","Button","useContract","STAKING_ADDRESS","knownErrors","parseBalance","useWeb3React","useDispatch","updatePools","Withdraw","pool","loading","setLoading","staking","active","dispatch","redeemTokens","info","tx","unstake","id","wait","success","account","err","console","log","message","error","user_stake","user_reward"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,gBAA7C;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AAEA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA4B,oCAA5B;AAEA,OAAO,MAAMC,QAEX,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AACf,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBd,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMe,OAAO,GAAGX,WAAW,CAACC,eAAD,EAAkBH,UAAlB,EAA8B,IAA9B,CAA3B;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAaR,YAAY,EAA/B;AACA,QAAMS,QAAQ,GAAGR,WAAW,EAA5B;;AAEA,QAAMS,YAAY,GAAG,YAAY;AAC7BJ,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACA,UAAIC,OAAJ,EAAa;AACTd,QAAAA,KAAK,CAACkB,IAAN,CAAW,iCAAX;AACA,cAAMC,EAAE,GAAG,OAAML,OAAN,aAAMA,OAAN,uBAAMA,OAAO,CAAEM,OAAT,CAAiBT,IAAI,CAACU,EAAtB,CAAN,CAAX;AACA,cAAMF,EAAE,CAACG,IAAH,EAAN;AACAtB,QAAAA,KAAK,CAACuB,OAAN,CAAc,SAAd;AACAP,QAAAA,QAAQ,CAACP,WAAW,CAACe,OAAO,IAAI,EAAZ,CAAZ,CAAR;AACH,OAPD,CASA;;AACH,KAVD,CAUE,OAAOC,GAAP,EAAiB;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB;AAEA,YAAMA,OAAO,GAAGvB,WAAW,CAACoB,GAAG,CAACG,OAAL,CAAX,IAA4BH,GAAG,CAACG,OAAhD;AACA5B,MAAAA,KAAK,CAAC6B,KAAN,CAAYD,OAAZ;AACH;;AACDf,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAnBD;;AAoBAa,EAAAA,OAAO,CAACC,GAAR,CAAYhB,IAAZ;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,2BAAf;AAAA,4BACI;AAAG,MAAA,SAAS,EAAC,yBAAb;AAAA,kCACkB,GADlB,eAEI;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAAA,mBACKL,YAAY,CAACK,IAAI,CAACmB,UAAN,CADjB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAQI;AAAG,MAAA,SAAS,EAAC,yBAAb;AAAA,mCACmB,GADnB,eAEI;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAAA,mBACKxB,YAAY,CAACK,IAAI,CAACoB,WAAN,CADjB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ,eAeI,QAAC,MAAD;AACI,MAAA,OAAO,EAAEd,YADb;AAEI,MAAA,SAAS,EAAC,oCAFd;AAGI,MAAA,OAAO,EAAEL,OAHb;AAII,MAAA,QAAQ,EAAE,CAACG,MAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA0BH,CAxDM","sourcesContent":["import React, { useState } from \"react\";\nimport { toast } from \"react-toastify\";\n\nimport StakingABI from \"@abi/Staking.json\";\nimport { Button } from \"@components\";\nimport { useContract } from \"@hooks/useContract\";\nimport { STAKING_ADDRESS, knownErrors } from \"@src/constants\";\nimport { parseBalance } from \"@src/utils\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Pool } from \"@ts/interfaces\";\nimport { useDispatch } from \"react-redux\";\nimport { updatePools } from \"@src/features/staking/stakingSlice\";\n\nexport const Withdraw: React.FC<{\n    pool: Pool;\n}> = ({ pool }) => {\n    const [loading, setLoading] = useState(false);\n    const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n    const { active } = useWeb3React();\n    const dispatch = useDispatch();\n\n    const redeemTokens = async () => {\n        setLoading(true);\n        try {\n            if (staking) {\n                toast.info(\"Awaiting successful transaction\");\n                const tx = await staking?.unstake(pool.id);\n                await tx.wait();\n                toast.success(\"Success\");\n                dispatch(updatePools(account || \"\"));\n            }\n\n            // eslint-disable-next-line\n        } catch (err: any) {\n            console.log(err.message);\n\n            const message = knownErrors[err.message] || err.message;\n            toast.error(message);\n        }\n        setLoading(false);\n    };\n    console.log(pool);\n\n    return (\n        <div className=\"flex-1 space-y-2 relative\">\n            <p className=\"text-base text-gray-300\">\n                Amount Staked{\" \"}\n                <strong className=\"text-white\">\n                    {parseBalance(pool.user_stake)} ARSH\n                </strong>\n            </p>\n\n            <p className=\"text-base text-gray-300\">\n                Rewards Earned{\" \"}\n                <strong className=\"text-white\">\n                    {parseBalance(pool.user_reward)} ARSH\n                </strong>\n            </p>\n\n            <Button\n                onClick={redeemTokens}\n                className=\"w-full absolute inset-x-0 bottom-0\"\n                loading={loading}\n                disabled={!active}\n            >\n                Redeem\n            </Button>\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}