{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Arshia Dhiman\\\\Solidity-Staking-Project\\\\staking-frontend\\\\src\\\\components\\\\staking-pool\\\\stake-menu\\\\withdraw\\\\index.tsx\";\nimport React, { useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport StakingABI from \"@abi/Staking.json\";\nimport { Button } from \"@components\";\nimport { useContract } from \"@hooks/useContract\";\nimport { STAKING_ADDRESS, knownErrors } from \"@src/constants\";\nimport { parseBalance } from \"@src/utils\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useDispatch } from \"react-redux\";\nimport { updatePools } from \"@src/features/staking/stakingSlice\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nexport const Withdraw = ({\n  pool\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n  const {\n    active,\n    account\n  } = useWeb3React();\n  const dispatch = useDispatch();\n\n  const redeemTokens = async () => {\n    setLoading(true);\n\n    try {\n      if (staking) {\n        toast.info(\"Awaiting successful transaction\");\n        const tx = await (staking === null || staking === void 0 ? void 0 : staking.unstake(pool.id));\n        await tx.wait();\n        toast.success(\"Success\");\n        dispatch(updatePools(account || \"\"));\n      } // eslint-disable-next-line\n\n    } catch (err) {\n      console.log(err.message);\n      const message = knownErrors[err.message] || err.message;\n      toast.error(message);\n    }\n\n    setLoading(false);\n  }; // const getDaysLeft = (_deposit_time: string) => {\n  //     const deposit_time = BigNumber.from(_deposit_time).toNumber();\n  //     const time_stamp_seconds = Math.floor(Date.now() / 1000);\n  //     const seconds_locked = BigNumber.from(pool.lockPeriod).toNumber();\n  //     const time_done = time_stamp_seconds - deposit_time;\n  //     const seconds_left = seconds_locked - time_done;\n  //     const days_left = Math.floor(seconds_left / 86400);\n  //     return days_left;\n  // };\n\n\n  const getDaysLeft = _deposit_time => {\n    const deposit_time = BigNumber.from(_deposit_time).toNumber();\n    const time_stamp_seconds = Math.floor(Date.now() / 1000);\n    const seconds_locked = BigNumber.from(pool.lockPeriod).toNumber();\n    const time_left = seconds_locked + deposit_time - time_stamp_seconds;\n    const days_left = Math.floor(time_left / 86400);\n    return days_left;\n  }; // const timestampInSeconds = Math.floor(Date.now() / 1000);\n  // const DaysLeft =\n  //     timestampInSeconds -\n  //     parseBalance(BigNumber.from(pool.user_deposit_time));\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex-1 space-y-2 relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"Amount Staked\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        className: \"text-white\",\n        children: [parseBalance(pool.user_stake), \" ARSH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"Rewards Earned\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        className: \"text-white\",\n        children: [parseBalance(pool.user_reward), \" ARSH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-base text-gray-300\",\n      children: [\"Days Left\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        className: \"text-white\",\n        children: getDaysLeft(pool.user_deposit_time)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: redeemTokens,\n      className: \"w-full absolute inset-x-0 bottom-0\",\n      loading: loading,\n      disabled: !active || pool.user_stake == \"0\",\n      children: \"Redeem\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/Arshia Dhiman/Solidity-Staking-Project/staking-frontend/src/components/staking-pool/stake-menu/withdraw/index.tsx"],"names":["React","useState","toast","StakingABI","Button","useContract","STAKING_ADDRESS","knownErrors","parseBalance","useWeb3React","useDispatch","updatePools","BigNumber","Withdraw","pool","loading","setLoading","staking","active","account","dispatch","redeemTokens","info","tx","unstake","id","wait","success","err","console","log","message","error","getDaysLeft","_deposit_time","deposit_time","from","toNumber","time_stamp_seconds","Math","floor","Date","now","seconds_locked","lockPeriod","time_left","days_left","user_stake","user_reward","user_deposit_time"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { toast } from \"react-toastify\";\n\nimport StakingABI from \"@abi/Staking.json\";\nimport { Button } from \"@components\";\nimport { useContract } from \"@hooks/useContract\";\nimport { STAKING_ADDRESS, knownErrors } from \"@src/constants\";\nimport { parseBalance } from \"@src/utils\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Pool } from \"@ts/interfaces\";\nimport { useDispatch } from \"react-redux\";\nimport { updatePools } from \"@src/features/staking/stakingSlice\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\n\nexport const Withdraw: React.FC<{\n    pool: Pool;\n}> = ({ pool }) => {\n    const [loading, setLoading] = useState(false);\n    const staking = useContract(STAKING_ADDRESS, StakingABI, true);\n    const { active, account } = useWeb3React();\n    const dispatch = useDispatch();\n\n    const redeemTokens = async () => {\n        setLoading(true);\n        try {\n            if (staking) {\n                toast.info(\"Awaiting successful transaction\");\n                const tx = await staking?.unstake(pool.id);\n                await tx.wait();\n                toast.success(\"Success\");\n                dispatch(updatePools(account || \"\"));\n            }\n\n            // eslint-disable-next-line\n        } catch (err: any) {\n            console.log(err.message);\n\n            const message = knownErrors[err.message] || err.message;\n            toast.error(message);\n        }\n        setLoading(false);\n    };\n\n    // const getDaysLeft = (_deposit_time: string) => {\n    //     const deposit_time = BigNumber.from(_deposit_time).toNumber();\n    //     const time_stamp_seconds = Math.floor(Date.now() / 1000);\n    //     const seconds_locked = BigNumber.from(pool.lockPeriod).toNumber();\n    //     const time_done = time_stamp_seconds - deposit_time;\n    //     const seconds_left = seconds_locked - time_done;\n    //     const days_left = Math.floor(seconds_left / 86400);\n\n    //     return days_left;\n    // };\n\n    const getDaysLeft = (_deposit_time: string) => {\n        const deposit_time = BigNumber.from(_deposit_time).toNumber();\n        const time_stamp_seconds = Math.floor(Date.now() / 1000);\n        const seconds_locked = BigNumber.from(pool.lockPeriod).toNumber();\n        const time_left = seconds_locked + deposit_time - time_stamp_seconds;\n        const days_left = Math.floor(time_left / 86400);\n\n        return days_left;\n    };\n\n    // const timestampInSeconds = Math.floor(Date.now() / 1000);\n\n    // const DaysLeft =\n    //     timestampInSeconds -\n    //     parseBalance(BigNumber.from(pool.user_deposit_time));\n\n    return (\n        <div className=\"flex-1 space-y-2 relative\">\n            <p className=\"text-base text-gray-300\">\n                Amount Staked{\" \"}\n                <strong className=\"text-white\">\n                    {parseBalance(pool.user_stake)} ARSH\n                </strong>\n            </p>\n\n            <p className=\"text-base text-gray-300\">\n                Rewards Earned{\" \"}\n                <strong className=\"text-white\">\n                    {parseBalance(pool.user_reward)} ARSH\n                </strong>\n            </p>\n\n            <p className=\"text-base text-gray-300\">\n                Days Left{\" \"}\n                <strong className=\"text-white\">\n                    {getDaysLeft(pool.user_deposit_time)}\n                </strong>\n            </p>\n\n            <Button\n                onClick={redeemTokens}\n                className=\"w-full absolute inset-x-0 bottom-0\"\n                loading={loading}\n                disabled={!active || pool.user_stake == \"0\"}\n            >\n                Redeem\n            </Button>\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}